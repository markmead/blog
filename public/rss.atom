<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.markmead.dev/</id>
    <title>Mark Mead</title>
    <updated>2022-09-22T11:20:03.321Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>Mark Mead</name>
        <uri>https://www.markmead.dev/</uri>
    </author>
    <link rel="alternate" href="https://www.markmead.dev/feed.xml"/>
    <link rel="self" href="https://www.markmead.dev/atom"/>
    <subtitle>RSS feed for blog posts.</subtitle>
    <logo>https://www.markmead.dev/og.png</logo>
    <icon>https://www.markmead.dev/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[How to Autogrow Textarea with Alpine JS (+ New Plugin)]]></title>
        <id>alpinejs-plugin-textarea-autogrow</id>
        <link href="https://www.markmead.dev/blog/alpinejs-plugin-textarea-autogrow"/>
        <updated>2022-06-09T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Easily create an autogrowing textarea with Alpine JS.]]></summary>
        <content type="html"><![CDATA[
At some point in your development career you will most likely be asked to make a `<textarea>` autogrow with the value that the user has inputted.

There are a few approaches you can take when creating this functionality but the most common is a JavaScript function similair to this.

```js
function textareaAutogrow() {
  let el = event.currentTarget

  el.style.height = 'auto'
  el.style.height = `${el.scrollHeight}px`
}
```

It's simple, clean and easy to use.

How do we take this and translate it to Alpine JS?

Let's start with a solution that uses the same code as the JavaScript example, but written with Alpine JS.

## Basic Alpine JS Example

```html
<textarea
  x-data="{
    resize: () => {
      $el.style.height = 'auto';
      $el.style.height = `${$el.scrollHeight}px`
    }
  }"
  x-init="resize()"
  @input="resize()"
></textarea>
```

What's happening here?

We have the `x-data` context initialising a `resize()` function which has the same logic as our JavaScript example. This function is then called when the Alpine JS component initialises and again everytime the `input` DOM event is dispatched.

Great, this works but does it tick the three boxes of the JavaScript example?

**Simple**

Yes. It's standard Alpine JS, minus the creation of a function in an x-data context.

**Clean**

No. It's added a extra complexity and bloat to your HTML which makes it much harder to quickly read through.

**Reusable/Easy**

No. It's not DRY and that's not something I'd want to be using, especially in HTML where things can often change.

## Extracting Alpine JS Logic Example

Let's take the logic we just wrote and extract it into it's own Alpine JS data context function. Here's what that would look like.

```html
<textarea x-data="grow"></textarea>
```

And the Alpine JS directive.

```js
document.addEventListener('alpine:init', () => {
  Alpine.data('grow', () => ({
    init() {
      this.resize()
      this.$el.addEventListener('input', () => this.resize())
    },
    resize() {
      this.$el.style.height = 'auto'
      this.$el.style.height = `${this.$el.scrollHeight}px`
    },
  }))
})
```

This looks much better!

Handling it with this approach allows us to add `x-data="grow"` without having to write the functionality over and over again. However... Let's take the following example.

```html
<textarea
  x-data="{ valid: false, grow }"
  :class="{ 'border-green-500': valid }"
></textarea>
```

Here we have a `valid: false` which handles adding/removing a CSS class.

Will the CSS work? Yes.

Will the autogrow functionality work? No.

There's probably a way to fix this, but for now I have a different solution.

## Alpine JS Plugin Example

I've created an Alpine JS plugin called [Alpine JS Textarea Autogrow](https://github.com/markmead/alpinejs-textarea-autogrow) that handles this functionality with an Alpine JS directive.

What this means is we can add this functionality like this.

```html
<textarea x-data x-grow></textarea>
```

Here we are initialising an Alpine JS component with `x-data` which is required to initialise the Alpine JS component. We then use `x-grow` which is an Alpine JS directive provided by the plugin to handle the autogrow functionality.

Under the hood `x-grow` is the JavaScript example showcased at the start of this blog post.

Something to ask is "Why would I use a plugin for something like this?" which is a great question. Here's some reasons.

- Simple, clean and easy to use
- No HTML bloat
- Very small JavaScript package (0.000344 MB)
- Allows for full use of `x-data`

All of these examples have their use cases, but if I were to create a list of best to worst approaches it would be.

1. Alpine JS Plugin - [Alpine JS Textarea Autogrow](https://github.com/markmead/alpinejs-textarea-autogrow)
2. Extracting Alpine JS Logic
3. JavaScript
4. Basic Alpine JS
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Clear the Shopify Cart with Alpine JS]]></title>
        <id>alpinejs-shopify-clear-cart-api</id>
        <link href="https://www.markmead.dev/blog/alpinejs-shopify-clear-cart-api"/>
        <updated>2021-12-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Find out how to clear the Shopify cart with Alpine JS and the Shopify API.]]></summary>
        <content type="html"><![CDATA[
Recently, I've been using a lot of Alpine JS when developing Shopify themes and
so far it's worked very well.

Thanks to the latest version of Alpine JS (version 3) we now have access to
Alpine JS stores by default! 🥳

[Alpine JS Stores Documentation](https://alpinejs.dev/globals/alpine-store)

This means that we can create a source of truth for particular state management,
in this case the Shopify cart.

Let's create a new Alpine JS store called "cart" that we will place in either
`assets/theme.js` or `layouts/theme.liquid`.

_If you are using `assets/theme.js` then you will need to import Alpine JS as a
module._

Here's our Alpine JS store for the cart.

```js
Alpine.store('cart', {
  data: null,

  clearCart() {
    fetch('/cart/clear.js, { method: 'POST' })
      .then((response) => response.ok && this.getCart())
  },

  getCart() {
    fetch('/cart.js')
      .then((response) => response.json())
      .then((data) => this.data = data)
      .catch((error) => console.error(error))
  }
})
```

Let's breakdown what this is doing.

| ID          | Type     | Description                                               |
| ----------- | -------- | --------------------------------------------------------- |
| `data`      | Variable | Keeps all the cart data that is set from `getCart`        |
| `clearCart` | Function | Clears the cart and then calls `getCart` once finished    |
| `getCart`   | Function | Gets the current cart and saves it to the `data` variable |

Once question you might have is why do we call `getCart` after clearing? This is
so we can reset the `data` variable.

There's another approach to doing this with `response.ok && this.cart = null`
but the approach is your choice, they're both very quick.

The last part is the HTML, thankfully Alpine JS exposes the store in a `$store`
variable. Therefore, we can create a button that clears the cart with the
following code.

```html
<button x-data type="button" @click="$store.cart.clearCart">Clear Cart</button>
```

And that's that. You can now take `$store.cart.clearCart` and place that where
you need to clear the cart in your Shopify store.

_If the clear cart button is within a `form` then you'll need to add
`type='button'` to the button to prevent it from submitting the form._

If you are using this on the cart page or within a cart popup/drawer then you'll
want to handle the UI to show the user that the cart has been emptied.
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Get Product Data from Shopify with Alpine JS]]></title>
        <id>alpinejs-shopify-product-data-api</id>
        <link href="https://www.markmead.dev/blog/alpinejs-shopify-product-data-api"/>
        <updated>2021-12-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how you can use Alpine JS to fetch product data in Shopify.]]></summary>
        <content type="html"><![CDATA[
In this post we will go over two methods of getting product data from the
Shopify API with Alpine JS.

If you've been using Dawn, the new open-source theme from Shopify that makes use
of Shopify 2.0, you may have seen the following code.

```html
<script type="application/json">
  {{ product | json }}
</script>
```

This will render the product data as JSON which we can then get via JavaScript.

```js
JSON.parse(document.querySelector('[type="application/json"]').textContent)
```

This approach works great and is a new concept to me, so thanks Shopify 🙌

The next step with this process is getting the data into Alpine JS, for that we
can use `Alpine.data()`.

```html
<div x-data="product">
  <h1>Product Title</h1>

  <p x-text="variant.title"></p>

  <p x-money="variant.price"></p>

  <form>
    <input type="text" name="id" x-model="variant.id" />

    <button type="submit">Add to Cart</button>
  </form>

  <script type="application/json">
    {{ product | json }}
  </script>
</div>

<script>
  document.addEventListener('alpine:init', () => {
    Alpine.data('product', () => ({
      data: '',
      variant: '',

      init() {
        this.data = JSON.parse(
          document.querySelector('[type="application/json"]').textContent
        )

        this.activeVariant()
        this.listenForChange()
      },

      activeVariant() {
        const variantId = this.getVariantParam()

        this.variant = variantId
          ? this.data.variants.find((variant) => variant.id === variantId)
          : this.data.variants[0]
      },

      listenForChange() {
        document.addEventListener('change', () => {
          this.activeVariant()
        })
      },

      getVariantParam() {
        const params = new URLSearchParams(window.location.search)
        const variantId = Number(params.get('variant'))

        return variantId
      },
    }))
  })
</script>
```

`x-money` is an custom Alpine JS directive that replicates the `| money` filter.
Check it out here [Alpine JS Money](https://github.com/markmead/alpinejs-money).

First off, everything happens in the `init()` function from Alpine JS.

```js
init() {
  this.data = JSON.parse(
    document.getElementById('productData').textContent
  )

  this.activeVariant()
  this.listenForChange()
}
```

First, we are setting the `data` variable value to be the JSON product data that
we can get from Liquid.

Then there's the two functions; `activeVariant()` and `listenForChange()`.

Here's what they're doing.

**`activeVariant()`**

This function calls another function `getVariantParam()` which returns the
variant param from the URL, this value is then set to a local variable of
`variantId`.

If then checks the variants array in the `data` object for a match based on the
`variantId`, if no match was found it defaults to the first variant in the
variants array. It then sets the `variant` variable to the variant that's
returned.

_The variants array is included within `{{ product | json }}`_

**`listenForChange()`**

This sets up a `change` event listener on the document that calls
`activeVariant()`, which allows us keep the `variant` variable up to date with
user changes in the product form.

## Get Shopify Product Data with Async/Await

This is an alternative approach that uses the Shopify API and doesn't require
many changes. It's worth noting that if you've added the following then you
should be OK to remove it.

```html
<script type="application/json">
  {{ product | json }}
</script>
```

_Please do not remove this if you are using Dawn, or it was already in your
theme._

Using the Shopify API for this is as simple as updating the way we get the JSON
product data in the `init()` function.

Here's the new function.

```js
async init() {
  const res = await fetch('/products/{{ product.handle }}.js')
  const data = await res.json()

  this.data = data

  this.activeVariant()
  this.listenForChange()
}
```

This is using the Shopify API endpoint for the current product and gets the
`data` from the response. Then we set the `data` variable to the data that is
returned.

From there it's business as usual.

Which way is better? That's a personal choice. Personally, I prefer the first
method of using `{{ product | json }}` as it's the approach Shopify have taken
with Dawn and once explained, I believe it's easier to understand.

With the new Dawn theme, it ships with JavaScript that handles what's included
in the basic example in this post. However, if you wanted to extend that then
you have to start editing the base JavaScript that Shopify has shipped with
Dawn.

This isn't a huge issue and in fact is a great way to learn more about the Dawn
theme, but you can easily run into complications. Therefore, I believe it's
better to run Alpine JS alongside the Dawn JavaScript and gradually replace what
it.
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Jumpstart JavaScript - Variables]]></title>
        <id>jumpstart-javascript-variables</id>
        <link href="https://www.markmead.dev/blog/jumpstart-javascript-variables"/>
        <updated>2022-02-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Beginner friendly overview of how to declare variables in JavaScript.]]></summary>
        <content type="html"><![CDATA[
## Which One Should I Use?

Start out using `const` for every variable and then switch to `let` when the
variable needs to be re-assigned.

Avoid using `var` as it doesn't have block scope.

## Const Overview

Use `const` when you don't want the variable to be re-assigned.

```js
const name = 'John'

name = 'Jane'
```

This will error as the `name` variable cannot be re-assigned.

However, it still allows for mutation on arrays and objects.

```js
// Array
const people = ['John', 'Jane']

people.push('Jim')

// Object
const person = {
  name: 'John',
  age: 20,
}

person.name = 'Jim'
```

Both of these will work and update the variable as it's being mutated, not
re-assigned.

[Understanding Immutability in JavaScript - Kingsley Silas](https://css-tricks.com/understanding-immutability-in-javascript/)

## Let Overview

Use `let` when you want to re-assign the variable.

```js
let name = 'John'

name = 'Jane'
```

The `name` variable will now be "Jane".

## Var Overview

> Avoid using `var` whenever possible as it lacks block scoping.

## What is Block Scope?

In short, a block is defined by curly brackets (`{}`).

The most common of these are functions, if statements and loops.

```js
function addPerson() {}

if (true) {
}

for (let person of people) {
}
```

When using `var` it doesn't have block scoping.

```js
var name = 'John'

function addPerson() {
  name = 'Jane'
}

console.log(name)
```

The `name` variable will now be "Jane" as it was re-assigned in the function.
This is problematic as it becomes difficult to understand where the change
happens.

However, when using `let` or `const` this is not the case.

```js
let name = 'John'

function addPerson() {
  name = 'Jane'
}

console.log(name)
```

The `name` variable will remain as "John".

This scoping allows for the variable names to be reused.

```js
let name = 'John'

function addPerson() {
  let name = 'Jane'

  console.log(name)
}

console.log(name)

addPerson()
```

This is absolutely fine and will result in "John" and "Jane" being logged to the
console.
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Use Google reCaptcha v2 with Livewire]]></title>
        <id>laravel-livewire-recaptcha-v2</id>
        <link href="https://www.markmead.dev/blog/laravel-livewire-recaptcha-v2"/>
        <updated>2022-09-04T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Protect your forms with Google reCaptcha v2 with Livewire.]]></summary>
        <content type="html"><![CDATA[
**Before you can write any code you'll need to be setup with Google reCaptcha.**

When you're setup you'll want to add the Google reCaptcha API key and secret to
the project, I've added mine in `config/services.php`.

```php
'recaptcha' => [
    'key' => env('RECAPTCHA_API_KEY'),
    'secret' => env('RECAPTCHA_SECRET_KEY'),
],
```

Now we can reference them like so.

```php
config('services.recaptcha.key')
config('services.recaptcha.secret')
```

---

## Initialising Google reCaptcha

We need to add the Google reCaptcha JavaScript code to our project. Inside the
layout add the following to the `<head>`.

```html
<script
  src="https://www.google.com/recaptcha/api.js?onload=handleRecaptchaLoad&render=explicit"
  async
  defer
></script>
```

Here we're declaring there's an `onload` event which triggers the
`handleRecaptchaLoad` function.

Add the following before the `</body>` tag.

```html
<script>
  let captchaIds = ['recaptchaA', 'recaptchaB', 'recaptchaC', 'recaptchaD']

  function handleRecaptchaLoad() {
      captchaIds.forEach((captchaId) => {
          if (!document.getElementById(captchaId)) {
              return
          }

          grecaptcha.render(
              captchaId, {
                  'sitekey': '{{ config('services.recaptcha.key') }}',
                  'callback': `${captchaId}Submit`
              }
          )
      })
  }

  window.addEventListener('reset-google-recaptcha', () => {
      captchaIds.forEach((captchaId) => {
          if (!document.getElementById(captchaId)) {
              return
          }

          grecaptcha.reset(captchaId)
      })
  })
</script>
```

**What's Happening?**

The `handleRecaptchaLoad` function loops through the `captchaIds` array and does
the following.

- Checks an element exists with that `id`
- Initalises and renders a Google reCaptcha on that element
- Adds a callback to the function based on the `id`

This will create callback function name such as `recaptchaASubmit`.

**Why This Approach?**

This allows for multiple Google reCaptcha components on the same page without
them interfering with eachother.

It works fine with a single Google reCaptcha component as well, but if you want
to remove the extra code, you do this.

```js
function handleRecaptchaLoad() {
    grecaptcha.render(
        captchaId, {
            'sitekey': '{{ config('services.recaptcha.key') }}',
            'callback': 'recaptchaComponentSubmit'
        }
    )
}

window.addEventListener('reset-google-recaptcha', () => {
    grecaptcha.reset('recaptchaComponentSubmit')
})
```

There's an event listener on the window which listens for a custom event
`reset-google-recaptcha`, when this is triggered it will reset the Google
reCaptcha components. This is required when using Livewire as the page does not
reload.

## Google reCaptcha Blade Component

We need to add some markup for the Google reCaptcha to hook into, I've done this
as a Blade component.

```blade
@props(['id'])

@push('scripts')
    <script>
        function {{ $id }}Submit(captchaToken) {
            @this.handleRecaptcha(captchaToken)
        }
    </script>
@endpush

<div>
    <div id="{{ $id }}"
         wire:ignore></div>

    @error('recaptcha')
        {{ $message }}
    @enderror
</div>
```

**What's Happening?**

This component accepts a single prop of `id` and does the following:

- Creating a unique function through the `id` prop
- Pushing that unique function to the `scripts` stack

This unique function matches up to the callback functions declared in the
`handleRecaptchaLoad` function.

**Talking to Livewire**

Through the use of `@this.handleRecaptcha(captchaToken)` we are passing the
response from the Google reCaptcha (`captchaToken`) to Livewire.

_If you haven't already make sure you add `@stack('scripts')` to your layout._

### Connecting to a Livewire Component

We now need to hook the Google reCaptcha component to Livewire. In this example
I'll be using a Livewire component called `Contact.php`.

First, we need to add the Blade component to the form within
`livewire/contact.blade.php`.

```html
<form>
  <x-form.recaptcha id="contactRecaptcha" />
</form>
```

On the Livewire component it needs state and methods so it can track if the
Google reCaptcha has been verified and handle submitting the form.

```php
class Contact extends Component
{
    use InteractsWithRecaptcha;

    public $recaptcha = false;

    protected $rules = [
        'recaptcha' => 'accepted',
    ];

    protected function messages()
    {
        return [
            'recaptcha.accepted' => 'reCaptcha is required.',
        ];
    }

    public function handleRecaptcha($captchaToken)
    {
        $this->recaptcha = $this->validateRecaptchaRequest($captchaToken);
    }

    public function submitForm()
    {
        $this->validate();

        $this->reset();

        $this->resetRecaptchaComponent();

        session()->flash('contact.success', 'Message sent!');
    }

    public function render()
    {
        return view('livewire.contact');
    }
}
```

We're using a custom trait called `InteractsWithRecaptcha`.

It's not required but if you're working with multiple Google reCaptcha
components then it's recommended.

Here's what that looks like.

```php
trait InteractsWithRecaptcha
{
    public function validateRecaptchaRequest($captchaToken)
    {
        $captchaResponse = Http::asForm()->post('https://www.google.com/recaptcha/api/siteverify', [
            'secret' => config('services.recaptcha.secret'),
            'response' => $captchaToken,
        ])->json();

        return $captchaResponse['success'];
    }

    public function resetRecaptchaComponent()
    {
        $this->dispatchBrowserEvent('reset-google-recaptcha');
    }
}
```

In the `handleRecaptcha` function on the Livewire component we are calling
`validateRecaptchaRequest` which hits the Google reCaptcha API endpoint to
verify the request and return if it was a successful or not.

On the Livewire component, the returned value from the API becomes the
`recaptcha` state.

If it returns `false` then the validation will fail when the form is submitted,
if it's `true` then the form will submit.

When the form submits we are using the Livewire function `reset()` to reset the
Livewire components state, we are then calling the `resetRecaptchaComponent` on
the trait, which uses the Livewire `dispatchBrowserEvent` function to emit the
event `reset-google-recaptcha` to the DOM window.

When `reset-google-recaptcha` is triggered it resets the Google reCaptcha
components.

---

And there we have it, a working Google reCaptcha with Livewire.

Hopefully this isn't too confusing, there's a lot of pieces talking to eachother
spread across files, but once the logic has been added to the project it becomes
a lot easier to follow.
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Ultimate Ruby on Rails Cheatsheet]]></title>
        <id>ruby-rails-ultimate-cheatsheet</id>
        <link href="https://www.markmead.dev/blog/ruby-rails-ultimate-cheatsheet"/>
        <updated>2021-10-19T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[Digestable Ruby on Rails information to help you with development.]]></summary>
        <content type="html"><![CDATA[
# The Ultimate Ruby on Rails

Cheat Sheet & Code Snippets

## General

### Create a Rails Application

```shell
rails new my-app
```

### See the Options Available for Creating a Rails Application

```shell
rails new --help
```

### Start Rails Server

```shell
rails s
```

### Start Rails Console

```shell
rails c
```

### Start Rails Console without Database Saving

This stops changes from saving while in the `rails console`

```shell
rails c --sandbox
```

### View and Search Rails Routes in the Browser

```shell
localhost:3000/rails/info/routes
```

### View Application Information in the Browser

```shell
http://localhost:3000/rails/info/properties
```

## Bundle

### Install Ruby Gems in Gemfile

```shell
bundle install
```

### Install Ruby Gem

```shell
bundle add devise
```

### Update ALL Ruby Gems

```shell
bundle update
```

### Update Ruby Gem

```shell
bundle update devise
```

### Remove Ruby Gem

```ruby
bundle remove devise
```

### Execute Bundle Command in Context of Application Gemfile

```ruby
bundle exec ...
```

## Generators

### Create Controller

Creates a `controllers/pages_controller.rb` with the `home` and `about` action
with view files

```shell
rails g controller pages home about
```

### Create Migration

Creates the migration to add the column `publish_date (date)` to the `projects`
table

```shell
rails g migration add_publish_date_to_projects publish_date:date
```

### Create Model

Creates a `models/project.rb` file and a migration to create the `projects`
table with the columns `title (string)` and `body (text)`

```shell
rails g model project title body:text
```

### Create Scaffold

Does everything that `rails g controller` and `rails g model` would do

```shell
rails g scaffold projects title body:text
```

### Create Rake Task

Creates a `lib/rake/projects.rake` file that includes the `trim_title` method,
you can call this method with `rake projects:trim_title`

```shell
rails g task projects trim_title
```

### Create Mailer

Creates a `mailers/user_mailer.rb` file with a `thanks_for_joining` action with
corresponding view files; `views/user_mailer/thanks_for_joining.txt.erb` and
`views/user_mailer/thanks_for_joining.html.erb`

```shell
rails g mailer user thanks_for_joining
```

## Destroy

Think of destroy as the opposite of generate. It'll figure out what generate
did, and undo it

### Destroy Controller

```shell
rails d controller Pages
```

### Delete Model

```shell
rails d model Article
```

### Delete Scaffold

```shell
rails d scaffold Projects
```

### Delete Mailer

```shell
rails d mailer User
```

## Database

### Create the Database

```shell
rails db:create
```

### Drop the Database

```shell
rails db:drop
```

### Migrate the Database

```shell
rails db:migrate
```

### Get Statuses of All Database Migrations

```shell
rails db:migrate:status
```

### Rollback Last Database Migration

```shell
rails db:rollback
```

### Rollback Multiple Database Migrations

```shell
rails db:rollback STEP=5
```

### Redo Database Migration

This does the following; rollback and migration the database

```shell
rails db:migrate:redo
```

Runs `db:rollback` and `db:migrate`

### Seed the Database

Runs the `db/seeds.rb` file

```shell
rails db:seed
```

### Reset the Database

This does the following; drops, create, migrates and seeds the database

```shell
rails db:reset
```

### Change Database to PostgresQL

```shell
rails db:system:change --to=postgresql
```

### Rest Database Table ID Count

```ruby
ActiveRecord::Base.connection.reset_pk_sequence!('table_name')
```

### Reset ALL Database Tables ID Count

```ruby
ActiveRecord::Base.connection.tables.each do |t|
  ActiveRecord::Base.connection.reset_pk_sequence!(t)
end
```

### Populate a New Table in a Database Migration

```ruby
class CreatePostCategories < ActiveRecord::Migration[5.0]
	def up
		t.integer :id
        t.string :name

        t.timestamps
	end

	PostCategory.reset_column_information

	%w[news blog insight guide].each do |category|
        PostCategory.create(name: category)
    end

	def down
        drop_table :post_categories
    end
end
```

### Reset Cached Information in Table Columns

```ruby
PostCategory.reset_column_information
```

## Routes

### Set Root

```ruby
root to: 'pages#home'
```

### Create a Route

Creates an `/about` path that maps to the `controller/pages_controller.rb`
`about` action

```ruby
get 'about', to: 'pages#about'
```

Map the `/about` route to the `PagesController` `about` action (creates a
`about_path` helper)

### Create a Route with a Named Route Helper

Reference the `/about` path with `about_us_path`

```ruby
get 'about', to: 'pages#about', as: 'about_us'
```

Same as the above but this time the helper is `about_us_path`

### CRUD Routes

This creates the full CRUD routes; `index`, `show`, `new`, `create`, `edit`,
`update` and `destroy`

```ruby
resources :projects
```

### CRUD Routes (Only)

This only creates the `index` and `show` action routes

```ruby
resources :projects, only: %i[index show]
```

### CRUD Routes (Except)

This creates all except the `index` and `show` action routes

```ruby
resources :projects, except: %i[index show]
```

### Non ID Resource

Use this when the resource doesn't need an `ID` lookup, in this example the
route `/profile` would be the `show` action route

This creates all the CRUD routes, minus the `index` action route

```ruby
resource :profile
```

### Prefix URL and Controller

This will create routes like `admin/projects` which map to the controller
`controller/admin/projects_controller.rb` and the views would be located at
`views/admin/projects`

```ruby
namespace :admin do
	resources :projects
end
```

### Prefix URL without Changing Controller

This will create routes like `admin/projects` but the controller would be still
be `controller/projects_controller.rb` and the views will be located at
`views/projects`

```ruby
scope :admin do
	resources :projects
end
```

### Create Route for Object

This will create the route `projects/search`

```ruby
resources :projects do
	collection do
		get "search"
	end
end
```

### Create Route for Individual Records

This will create the route `projects/:id/complete`

```ruby
resources :projects do
	member do
		put "complete"
	end
end
```

### Add 301 Redirect

```ruby
get 'about', to: redirect('about-us')
```

[301 Moved Permanently - HTTP | MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301)

### Add 308 Redirect

```ruby
get 'about', to: redirect('about-us')
```

[308 Permanent Redirect - HTTP | MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308)

## Controllers

### Run Code Before Action

```ruby
before_action :authenticate_user
```

### Run Code Before Action on Specific Actions

```ruby
before_action :authenticate_user, only: %i[create update destroy]
```

### Redirect Back with Fallback Location

```ruby
redirect_back(fallback_location: root_path)
```

## Models

### Validate Presence of Attribute

```ruby
validates :title, **presence**: true
```

### Validate Formatting of Email

```ruby
validates :email, **format**: URI::MailTo::EMAIL_REGEXP
```

### Validate Attribute Value is Unique

```ruby
validates :title, **uniqueness**: true
```

### Validate Attribute Length is Within a Range

```ruby
validates :title, length: { minimum: 60, maximum: 120 }
```

### Set a CONST Variable

This can then be referenced as `Model::COUNTRIES` where `Model` is the class
name

```ruby
COUNTRIES = %w[England France Germany
```

### Create a Scope

This allows you to call `Project.live`

You can also use methods, but scopes are recommend when they can be used

```ruby
scope :live, -> { where(draft: false) }
```

### Set Default Scope (NOT Recommended)

```ruby
default_scope { order(created_at :desc) }
```

### Callback Method on Action

This runs the `set_publish_date` method before the record is created

```ruby
before_create :set_publish_date

private

def set_publish_date
	self.publish_date = Date.today
end
```

There are a lot of different call back methods, you can see the full list here:

[Active Record Callbacks - Ruby on Rails Guides](https://guides.rubyonrails.org/active_record_callbacks.html)

_Be careful when when using `update` in a callback as it can cause an infinite
loop, to avoid this use `update_columns`_

### Query TRUE/FALSE on Boolean Column

Attributes that are stored as a `boolean` can be queried if `TRUE` or `FALSE` by
appending "?"

```ruby
@project.live?

@user.admin?

@product.published?
```

### Setup Nested Attributes

```ruby
has_many :tags

accepts_nested_attributes_for :tags
```

### Prevent Record Creation if ALL Nested Attributes are Blank

```ruby
has_many :tags

accepts_nested_attributes_for :tags, reject_if: :all_blank
```

### Allow Records from Nested Attributes to be Destroy

```ruby
has_many :tags

accepts_nested_attributes_for :tags, allow_destroy: true
```

### Delegate Attributes to Model in a Relationship (Law of Demeter)

The "Law of Demeter" is the process of chaining method calls across objects

**The Problem**

```ruby
post.user.name
post.user.email
```

**Fix #1 - Model Methods**

This works, but you could cause the model from growing out of control

```ruby
# models/post.rb

def user_name
	user.username
end

def user_email
	user.email
end
```

**Fix #2 - Delegate**

It's a nice idea to pass `allow_nil: true` so `nil` is returned if the data is
not available

```ruby
# models/user.rb

delegate :name, :email, to: :post, allow_nil: true
```

You can then do:

```ruby
post.user_name
post.user_email
```

### Deleting Records without Callbacks (Fast but Risky)

This is the fastest way to delete records, but it skips callbacks

```ruby
Post.first.delete
Post.delete_all
```

### Deleting Records with Callbacks (Slow but Safe)

This is the slower way to delete records, but it doesn't skip callbacks and
isn't that slow

```ruby
Post.first.destroy
Post.destroy_all
```

## ActiveRecord

### Return All Records of Object

```ruby
Project.all
```

### Find Record by ID

```ruby
Project.find(10)
```

### Find Record by ID (Won't Crash if NIL)

```ruby
Project.find_by(id: 10)
```

### Find Record by ID (ID from Params)

```ruby
Project.find(params[:id])
```

### Find Records by Attribute Value

```ruby
Project.find_by(title: 'Hello')
```

### Return Records Matching the Query

This accepts multiple column/value combinations

```ruby
Project.where(draft: false)
```

### Return Records NOT Matching the Query

This accepts multiple column/value combinations

```ruby
Project.where.not(draft: false)
```

### Return Number of Records in Database Table

```ruby
Project.count
```

### Find the First, Second, Third, Fourth, Fifth, Forty Second and Last Record

```ruby
Project.first
Project.second
Project.third
Project.fourth
Project.fifth
Project.forty_two
...
Project.last
```

["Accessing the Reddit" with Ruby on Rails](https://www.reddit.com/r/ruby/comments/823os/rails_core_has_a_method_for_accessing_the_reddit/)

### Exclude Current Record from Query

```ruby
Project.where(live: true).without(self)
```

## ActiveStorage

### Add File Attachment to Model

```ruby
has_one_attached :image
```

### Check if File Attachment is Present

```ruby
@post.image.attached?
```

### Delete a File Attachment from Active Storage

```ruby
@post.image.purge
```

## ActionText

### Add ActionText to Model

```ruby
has_rich_text :body
```

### Convert ActionText Content to Plain Text

This is useful for truncating to create an excerpt

```ruby
body.to_plain_text
```

### Expose ActionText Content on Model

This will allow you to query the content in SQL, useful for searching

```ruby
has_one :action_text_rich_text, class_name: 'ActionText::RichText', as: :record

def self.search(query)
	joins(:action_text_rich_text)
		.where('action_text_rich_texts.body LIKE :query', query: "%#{query}%")
end
```

This will search the database for records where `body` is similar to the value
of `query`

## Views

### Render Data

```erb
<%= @project.title %>
```

### Render HTML Data

```erb
<%== @project.title %>
```

### Render Data

```erb
<%= @project.title %>
```

### Set Variable/Prop

```erb
<% background_color = "#000" %>
```

### Assign Variable/Prop

```erb
<% bg_color = local_assigns.fetch(:background_color)
```

### Assign Variable/Prop with Default Value

```erb
<% bg_color = local_assigns.fetch(:background_color, "#000")
```

### Render Page Content

```erb
<%= yield %>
```

### Render Content from Views into Layout

Add a `<%= yield(...) %>` helper layout file:
`views/layouts/application.html.erb`

```erb
<%= yield(:head) %>
```

Pass content into a `<%= content_for(...) %>` with matching name to the helper
`yield`

```erb
<% content_for(:head) do %>
    <meta name="turbolinks-visit-control" content="reload" />
<% end %>
```

### Link to Page

`<a href="/about">About</a>`

```erb
<%= link_to("About", about_path) %>
```

### Link to Page with HTML Attributes

`<a href="/about" class="button">About</a>`

```erb
<%= link_to("About", about_path, class: "button") %>
```

Same as the above but with HTML attributes included

### Link to Record

`<a href="/projects/10">Project title</a>`

```erb
<%= link_to(@project.title, project_path(@project)) %>
```

### Link to Record (Short)

`<a href="/projects/10">Project title</a>`

```erb
<%= link_to(@project.title, @project) %>
```

### Delete Record (Link)

```erb
<%= link_to("Delete", @project, method: :delete) %>
```

### Delete Record (Form - Recommended)

```erb
<%= button_to("Delete", @project, method: :delete) %>
```

### Back Link

```erb
<%= link_to("Back", :back) %>
```

### Create Object Link with Array (Admin)

`<a href="admin/projects/">Projects</a>`

```erb
<%= link_to("Projects", [:admin, :projects]) %>
```

This is the equivalent of:

```erb
<%= link_to("Project", admin_projects_path) %>
```

### Create Record Show Link with Array (Admin)

`<a href="admin/projects/10">Project</a>`

```erb
<%= link_to("Project", [:admin, @project]) %>
```

This is the equivalent of:

```erb
<%= link_to("Project", admin_project_path(project)) %>
```

### Create Record Edit Link with Array (Edit/Admin)

`<a href="admin/projects/10/edit">Edit</a>`

```erb
<%= link_to("Edit", [:edit, :admin, @project]) %>
```

This is the equivalent of:

```erb
<%= link_to("Edit", edit_admin_project_path(project)) %>
```

### Create Email Link

`<a href="mailto:john@doe.com">john@doe.com</a>`

```erb
<%= mail_to("john@doe.com") %>
```

### Create Email Link with Link Text

`<a href="mailto:john@doe.com">Email me</a>`

```erb
<%= mail_to("john@doe.com", "Email me") %>
```

### Render Partial

```erb
<%= render "shared/header" %>
```

### Render Partial with Variables/Props

```erb
<%= render("shared/header, title: "Hello World!") %>
```

### Loop Through Object

```erb
<% @projects.each do |project| %>
    <%= project.title %>
<% end %>
```

### Render Collection

```erb
<%= render(@projects) %>
```

This is the equivalent of:

```erb
<% @projects.each do |project| %>
    <%= render("project", project: project)
<% end %>
```

### Conditional Render (IF)

```erb
<% if @project.draft? %>
    <span>Draft</span>
<% end %>
```

### Conditional Render (Inline IF)

```erb
<%= render("download") if @project.download? %>
```

### Conditional Render (IF/ELSE)

```erb
<% if @project.draft? %>
    <span>Draft</span>
<% else %>
    <span>Live</span>
<% end %>
```

### Conditional Render (IF/ELSIF/ELSE)

```erb
<% if @project.draft? %>
    <span>Draft</span>
<% elsif @project.scheduled? %>
    <span>Scheduled</span>
<% else %>
    <span>Live</span>
<% end %>
```

Conditional rendering based on the value of `@project.draft?` and
`@project.scheduled?`

### Alternate CSS Classes in Loop

```erb
<% @projects.each do |project| %>
	<div class="<%= cycle("odd-class", "even-class") -%>">
		<%= project.title %>
	</div>
<% end %>
```

### Pluralize Word

This will render "1 project" or "2 projects"

```erb
<%= pluralize(@projects.count, 'project') %>
```

Change "project" to "projects" if `@projects.count > 1`

### Pluralize Word with Specific Plural Word

This will render "1 person" or "2 users"

```erb
<%= pluralize(@users.count, 'person', plural: 'users') %>
```

### Truncate Text

```erb
<%= truncate("...")
```

### Truncate Text at Specific Length

```erb
<%= truncate("...", length: 50)
```

### Truncate HTML

This will render the HTML tags as a string

```erb
<%= truncate("<div>...</div>", escape: false)
```

### Created HTML ID from Record

This will create `project_10`

```ruby
dom_id(@project)
```

### Created HTML ID from Record with Prefix

This will create `edit_project_10`

```ruby
dom_id(@project, :edit)
```

## Flash Messages

### Add More Flash Types

`controllers/application_controller.rb`

```ruby
add_flash_types :error, :success
```

### Render Flash Message

```erb
<div class="alert alert-notice" role="alert">
    <%= flash[:notice] %>
</div>

<div class="alert alert-alert" role="alert">
    <%= flash[:alert] %>
</div>
```

### Render Flash Messages with Dynamic Class

```erb
<% flash.each do |type, message| %>
    <div class="alert alert-<%= type %>" role="alert"> <%= message %> </div>
<% end %>
```

## Caching

### Fragment Caching

```erb
<%= @projects.each do |project| %>
    <% cache(project) %>
        ...
    <% end %>
<% end %>
```

### Collection Caching

```erb
<%= render(partial: "project", collection: @projects, cached: true) %>
```

[Fragment and Collection Caching in Ruby on Rails](https://www.learnrubyonrails.com/blogs/rails-fragment-collection-caching/)

## Forms

### Render Form Partial

`views/projects/_form.html.erb`

You should use this on the `new` and `edit` views to keep them DRY

```erb
<%= render("form", project: @project) %>
```

### Form with Model

```erb
<%= form_with(model: project) do |form| %>
    <%= form.label(:title) %>
    <%= form.text_field(:title) %>
    <%= form.submit %>
<% end %>
```

### Non-Remote Form

This will stop the form submitting with JavaScript

```erb
<%= form_with(..., local: true) do |form| %>
    ...
<% end %>
```

[Working with JavaScript in Rails - Ruby on Rails Guides](https://guides.rubyonrails.org/working_with_javascript_in_rails.html#remote-elements)

### Search Form

```erb
<%= form_with(url: search_path, method: :get, local: true) do |form| %>
    <%= form.label(:q, "Search") %>
    <%= form.search_field(:q, placeholder: "Search...") %>
    <%= form.submit("Search") %>
<% end %>
```

### Namespace Form URL

This will create the URL `admin/projects`

```erb
<%= form_with(model: [:admin, project]) do |form| %>
    ...
<% end %>
```

### Form Select

Data supplied from a `CONST` variable on the `User` model

```erb
<%= form.select(:country, User::COUNTRIES) %>
```

### Form Select with Prompt Option

```erb
<%= form.select(:country, User::COUNTRIES, inlude_blank: "Select country") %>
```

### Form Select with HTML Attributes

```erb
<%= form.select(:country, User::COUNTRIES, {}, { class: "form-control" }) %>
```

### Created a Nested Form

```erb
<%= form.fields_for(:projects) do |project_fields| %>
    <%= render "project/form", form: project_fields %>
<% end %>
```

### Remove Generated ID from Nested Form

```erb
<%= form.fields_for(:projects, include_id: false) do |project_fields| %>
    <%= render "project/form", form: project_fields %>
<% end %>
```

### Showing Form Errors in the View

Base HTML to use for form errors:

```erb
<div role="alert">
  <h2> There's <%= pluralize(errors.count, 'error') %> to fix </h2>

  <ul>
    <% errors.full_messages.each do |error| %>
        <li><%= error %></li>
    <% end %>
  </ul>
</div>
```

The error message here will render like:

```shell
Name can't be blank
Email is invalid
```

Render this with:

```erb
<%= render("components/form/errors", errors: MODEL.errors) %>
```

## Mailer

### Email Address with Name

This will create the following string `John Doe <johndoe@email.com>`

If now name is passed it will return the email address only

```ruby
ActionMailer::Base.email_address_with_name(@user.email, @user.name)
```

## Cookies & Sessions

### Create Session Cookie

Session cookies will be removed once the session is over (page closes)

```ruby
session[:user_id] = current_user.id
```

### Delete Session Cookie

```ruby
session.delete(:user_id)
```

### Create Cookie

```ruby
cookies[:user_id] = current_user.id
```

### Delete Cookie

```ruby
cookies.delete(:user_id)
```

### Signed Cookie

```ruby
cookies.signed[:user_id] = current_user.id
```

### Encrypted Cookie

```ruby
cookies.encrypted[:user_id] = current_user.id
```

### Set Cookie Expiration Date

```ruby
cookies[:seen_newsletter_popup] = {
    value: "true",
    expires: 10.days
}
```

### Permanent Cookie

This cookie will last 20 years

```ruby
cookies.permanent[:seen_newsletter_popup] = "true"
```

[Demystifying Cookie Security in Ruby on Rails 6](https://dev.to/ayushn21/demystifying-cookie-security-in-rails-6-1j2f)

## Strings

### Return Length of String

```ruby
"Hello World".size # 11

"Hello World".length # 11
```

### Check if String Includes Text

```ruby
"Hello World".includes?("Hello") # true

"Hello World".includes?("Goodbye") # true
```

### Replace Part of a String

```ruby
"Hello World".gsub("Hello", "Goodbye") # Goodbye World
```

### Split String into Array

```ruby
"Hello World".split # ["Hello", "World"]

"Simon, Jay, William".split(",") # ["Simon", " Jay", " William"]
```

### String Interpolation

```ruby
name = "Simon"

"Hello #{name}"
```

## Arrays

### Return Length of Array

```ruby
["Hello", "World"].size # 2

["Hello", "World"].length # 2

["Hello", "World"].count # 2
```

### Push to Array

```ruby
["Hello", "World"] << "Goodbye" # ["Hello", "World", "Goodbye"]

["Hello", "World"].push("Goodbye") # ["Hello", "World", "Goodbye"]
```

### Combine Arrays

```ruby
["Hi", "Hello"].concat(["Bye", "See Ya"]) # ["Hi", "Hello", "Bye", "See Ya"]

["Hi", "Hello"] + ["Bye", "See Ya"] # ["Hi", "Hello", "Bye", "See Ya"]
```

### Remove from Array

```ruby
["Hello", "World"].delete("Hello") # World

["Hello", "World"].delete_at(1) # World
```

### Remove All from Array

```ruby
["Hello", "World"].clear # []
```

### Check if Array Includes Text

```ruby
["Hello", "World"].includes?("Hello") # true

["Hello", "World"].includes?("Goodbye") # true
```

### Reverse Array

```ruby
["Hello", "World"].reverse # ["World", "Hello"]
```

### Shuffle the Array

Return a random order of the array

```ruby
["Simon", "Jay", "William"].shuffle
```

### Sample the Array

Return a random item from the array

```ruby
["Simon", "Jay", "William"].sample
```

### Remove Duplicate Items from Array

```ruby
["A", "A", "B", "C", "C"].uniq # ["A", "B", "C"]
```

### Flatten Array

```ruby
[["Hi", "Hello"], ["Bye", "See Ya"]].flatten # ["Hi", "Hello", "Bye", "See Ya"]
```

### Join Array Items (String)

```ruby
["Simon", "Jay", "William"].join(", ") # Simon, Jay, William
```

### Array Items to Sentence (String)

```ruby
["Simon", "Jay", "William"].to_sentence # Simon, Jay, and William
```

## Other

### Symbol to Proc

**Capitalize Each Item in Array**

```ruby
["hello", "world"].map(&:capitalize) # ["Hello", "World"]
```

### Find Current Controller Name

```ruby
controller.controller_name
```

### Find Current Controller Action Name

```ruby
controller.action_name
```

### Remove Empty Values from Array

Returns a new array with empty values removed

```ruby
["Hello", "", "World", nil].reject(&:blank?)

# ["Hello", "World"]
```

### Create Array of Strings

You can use `%W` if you need interpolation

```ruby
# Old
["Rails", "Tailwind", "HTML", "Stimulus"]

# New
%w[Rails Tailwind HTML Stimulus]
```

_You can only use `%w` and `%W` on single words as the array splits on
whitespace_

### Create Array of Symbols

You can use `%I` if you need interpolation

```ruby
# Old
[:new, :edit, :create, :update, :destroy]

# New
%i[new edit create update destroy]
```

_You can only use `%i` and `%I` on single words as the array splits on
whitespace_

### Calculate Sum of Values

```ruby
[10, 10, 20].sum
```

### Do Block

```ruby
Post.all.each do |post|
  post.title
end
```

### Single Line Do Blocks

```ruby
Post.all.each{ |post| post.save }
```

### Create a Method

```ruby
def do_something
end
```

### Create Method with Arguments

```ruby
def do_something(name)
end
```

### Create Method with Default Argument

```ruby
def do_something(name = "User")
end
```

### Create a Class

```ruby
class Person
end
```

### Create a Class that Accepts Arguments

```ruby
class Person
	attr_reader :name

	def initialize(name:)
		@name = name
	end
end

person = Person.new(name: "Simon")
```

### If/Else Statement

```ruby
number = 20

if number > 10
	"Greater than 10"
else
	"Less than 10"
end
```

### If/Elsif/Else Statement

```ruby
number = 20

if number > 15
	"Greater than 15"
elsif number > 10
	"Greater than 10"
else
	"Less than 10"
end
```

### Case/Switch Statement

```ruby
number = 20

case number
when > 15
	"Greater than 15"
when > 10
	"Greater than 10"
else
	"Less than 10"
end
```

## PG Search (Gem)

`bundle add pg_search`

### Search Against Single Attribute on Model

```ruby
include PgSearch::Model

pg_search_scope :search, against: :title
```

### Search Against Multiple Attributes on Model

```ruby
include PgSearch::Model

pg_search_scope :search, against: %i[title subtitle body]
```

### Search Against Action Text Data

Replace `body` with the name of your column using Action Text

```ruby
include PgSearch::Model

pg_search_scope :search, associated_against: { rich_text_body: :body }
```

## Web Console (Gem)

Installed by default

### View Interactive Rails Console in the Browser

```ruby
class ProjectsController < ApplicationController
	def index
		@projects = Project.all

		console
	end
end
```

Or you can use it in ERB like so.

```erb
<h1>All Projects</h1>

<%= console %>
```

## Friendly ID (Gem)

`bundle add friendly_id`

### Use Single Attribute

```ruby
class Project < ApplicationRecord
	extend FriendlyId
	friendly_id :title, use: [:slugged, :finders]
end
```

### Fallback to Multiple Attributes

If `title` is not unique fallback to `title-company`

```ruby
class Project < ApplicationRecord
	extend FriendlyId
	friendly_id :slug_candidates, use: [:slugged, :finders]

	def slug_candidates
		[:title, [:title, :company]]
	end
end
```

### Better Find

This removes the need to use `friendly.find`

```ruby
use: [:slugged, :finders]
```

## Stripe (Gem)

`bundle add stripe`

### Setup Stripe

`config/initializers/stripe.rb`

```ruby
Rails.configuration.stripe = {
  publishable_key: ENV["STRIPE_PUBLISHABLE_KEY"],
  secret_key: ENV["STRIPE_SECRET_KEY"],
}

Stripe.api_key = Rails.configuration.stripe[:secret_key]
```

`views/layouts/application.html.erb`

```erb
<%= javascript_include_tag "https://js.stripe.com/v3/" %>
```

### Stripe Checkout

`config/routes.rb`

```ruby
scope "checkout" do
	post "create", to: "checkout#create", as: :checkout_create
	get "cancel", to: "checkout#cancel", as: :checkout_cancel
	get "success", to: "checkout#success", as: :checkout_success
end
```

`controllers/checkouts_controller.rb`

```ruby
class CheckoutController < ApplicationController
  def create
    @session = Stripe::Checkout::Session.create(
      payment_method_types: %w[card],
      line_items: [
        {
          name: params[:name],
          description: params[:description],
          amount: params[:amount],
          currency: "gbp",
          quantity: params[:quantity],
        },
      ],
      success_url: checkout_success_url,
      cancel_url: checkout_cancel_url,
    )

    respond_to do |format|
      format.js
    end
  end

  def success; end

  def cancel; end
end
```

`views/checkount/create.js.erb`

```ruby
const stripe = Stripe("<%= ENV['STRIPE_PUBLISHABLE_KEY'] %>")

stripe.redirectToCheckout({
  sessionId: "<%= @session.id %>"
})
```

`views/products/product.html.erb`

```erb
<%= form_with(url: checkout_create_path, local: false) do |form| %>
    <%= form.hidden_field :name, value: @product.title %>
    <%= form.hidden_field :description, value: @product.description %>
    <%= form.hidden_field :amount, value: @product.price * 100 %> <%= form.number_field :quantity, value: 1 %>
    <%= form.submit %>
<% end %>
```

## Code Snippets

### Rails Based Body Class

Set a unique class to the `<body>` tag, created from the current controller and
action names

```ruby
def page_class
  "#{controller.controller_name}-#{controller.action_name}"
end
```

And then in your layout file you can do this.

```erb
<body class="<%= page_class %>">
```

[Using the Controller to Create Page Class Names in Ruby on Rails](https://www.learnrubyonrails.com/blogs/rails-controller-class-names-page/)

### Better Email Link

Removes the need to pass the email twice when using HTML attributes

```ruby
def email_to(email, **object)
  link_to(email, "mailto:#{email}", **object)
end
```

### Better Phone Link

Removes the need to pass the email twice when using HTML attributes

```ruby
def tel_to(number, **object)
  link_to(number, "tel:#{number}", **object)
end
```

As of Rails `v6.1.3.1` there is a `phone_to` helper
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Fix Livewire Ignoring Localization in Routes]]></title>
        <id>laravel-livewire-localization</id>
        <link href="https://www.markmead.dev/blog/laravel-livewire-localization"/>
        <updated>2022-05-24T23:00:00.000Z</updated>
        <summary type="html"><![CDATA[How you can fix Livewire ignoring your localized routes.]]></summary>
        <content type="html"><![CDATA[
Recently, I have been working on a Laravel website using the TALL stack that
requires different locales. These locales are specific to different URLs, such
as:

- `en-gb` (UK/International)
- `en-au` (Australia)
- `en-us` (USA)

The project uses a config file `sites.php` to manage data for each site that
can't be managed from translation files. This data can be accessed through a
custom facade:

```php
LocaleSettings::get('default_currency');
```

Under the hood this is doing:

```php
return config('sites')[app()->getLocale()][$key];
```

For each of these locales we have different currencies.

| Route | Currencies         | Default |
| ----- | ------------------ | ------- |
| en-gb | GBP, USD, ZAR, EUR | GBP     |
| en-au | AUD, USD           | AUD     |
| en-us | USD, GBP           | USD     |

When a currency or locale is changed, the cart and product components on the
page will be refreshed to show the correct price for that currency.

This works fine when changing the currency through Livewire.

However, when switching the locale it sets the currency to the default currency
which works fine on initial load, but when Livewire does a POST request when a
component updates, for example when adding to the cart, it resets back to the
fallback currency of GBP.

This is because the locale in the route is being changed, which is caused by
Livewire not using localized routes when doing the POST request to the server.

For this I created a new middleware called `LocalizationLivewire` with the
following code:

```php
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;

class LocalizationLivewire
{
    public function handle(Request $request, Closure $next)
    {
        if ($request->route()->getName() === 'livewire.message') {
            app()->setLocale($request->request->get('fingerprint')['locale']);

            return $next($request);
        }

        return $next($request);
    }
}
```

And added this above my `Localization` middleware in the `Kernel.php`.

This middleware checks if the route name is `livewire.message` which is the
route name for Livewire POST request when components update.

It then sets the app locale to the value of the locale in the fingerprint on the
request. If you're not sure what the fingerprint is, then here's a snippet from
Caleb Porzio's blog
[How Livewire Works (a deep dive)](https://calebporzio.com/how-livewire-works-a-deep-dive).

> This is data associated with a component that makes it unique and provides
> essential non-changing information about it.

```json
"fingerprint": {
  "id": "44Njb4Yue0jBTzpzRlUf",
  "name": "counter",
  "locale": "en",
  "path": "",
  "method": "GET"
},
```

And that's basically that, it worked as expected from there out. Such an easy
fix after hours (and I mean hours) of banging my head against the wall.
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Create Custom Gradients in Tailwind CSS with JIT]]></title>
        <id>custom-gradients-with-tailwindcss-jit</id>
        <link href="https://www.markmead.dev/blog/custom-gradients-with-tailwindcss-jit"/>
        <updated>2022-03-07T00:00:00.000Z</updated>
        <content type="html"><![CDATA[
## What is JIT?

Since v3, JIT has been the default in Tailwind CSS and has bought a lot of power to the framework. One of the best additions are [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values), these allow you to replace custom CSS with Tailwind CSS like classes.

### Without Tailwind CSS JIT

```html
<div class="absolute p-4 floating-alert">Hello World! 👋</div>
```

And for the CSS...

```css
.floating-alert {
  bottom: 5px;
  right: 5px;
}
```

### With Tailwind CSS JIT

```html
<div class="absolute p-4 bottom-[5px] right-[5px]">Hello World! 👋</div>
```

The benefit here is keeping everything within the HTML, this means:

- Less switching between files
- No need to update Tailwind CSS config
- Easily use Tailwind CSS breakpoints `top-[2px] sm:top-[3px] lg:top-[5px]`

## Creating Gradients with Tailwind CSS JIT

If you are using these gradients more than once, it's worth adding them to the Tailwind CSS config.

The syntax for creating a gradient looks confusing, but it's easy to understand once you realise that spaces are replaced with underscores. Take the following example:

```html
<div class="bg-[linear-gradient(180deg,_#005BBB_49.9%,_#FFD500_50%)]"></div>
```

In CSS this would be:

```css
background-image: linear-gradient(180deg, #005bbb 49.9%, #ffd500 50%);
```

The underscores after commas are personal choice, I leave them in for readability but you can remove them.

Here's a [preview of the example](https://play.tailwindcss.com/0Q0oaPLA4I) created in Tailwind CSS play sandbox.

Let's try something a little tougher.

## Conic Gradients in Tailwind CSS with JIT

For this I've used [Hypercolor](https://hypercolor.dev) to find a `conic-gradient` for the example.

![](/images/posts/conic-gradient-example.webp)

Here's the code written to replicate the example:

```html
<div
  class="bg-[conic-gradient(at_left_center,_#eab308,_#a855f7,_#3b82f6)]"
></div>
```

Which results in the follow CSS:

```css
background-image: conic-gradient(at left center, #eab308, #a855f7, #3b82f6);
```

## Radial Gradients in Tailwind CSS with JIT

Once again I'm using [Hypercolor](https://hypercolor.dev) to find a `radial-gradient` for the example.

![](/images/posts/radial-gradient-example.webp)

Here's the code written to replicate the example:

```html
<div
  class="bg-[radial-gradient(at_center_bottom,_#fde68a,_#7c3aed,_#0c4a6e)]"
></div>
```

Which results in the follow CSS:

```css
background-image: radial-gradient(at center bottom, #fde68a, #7c3aed, #0c4a6e);
```

And that's all it takes to add custom gradients, even styles that don't exist in Tailwind CSS to Tailwind CSS with JIT. Checkout [Hypercolor](https://hypercolor.dev) for more gradients including; mesh gradients, grainy gradients and a gradient generator.
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[HyperUI x Hacktoberfest 2022]]></title>
        <id>hacktoberfest-2022</id>
        <link href="https://www.markmead.dev/blog/hacktoberfest-2022"/>
        <updated>2022-09-20T00:00:00.000Z</updated>
        <content type="html"><![CDATA[
I'm pleased to announce that HyperUI will be participating in [Hacktoberfest 2022](https://hacktoberfest.com).

Before creating PRs, it's worth reading through [How to Contribute to HyperUI](/blog/how-to-contribute) as well as the [Hacktoberfest Participation Guide](https://hacktoberfest.com/participation/).

All PRs will need to be up-to the standard of previous PRs on the HyperUI project, it would be worth spending a few minutes reviewing what other contributors have done.

Please do not split out related changes onto different PRs to maximise your Hacktoberfest contributions, your PRs will be marked as `spam` pushing you closer to being banned from Hacktoberfest.

Enjoy and I look forward to approving your PRs! 🎃

Here's a list of other projects I work on that are taking part:

- [HyperJS](https://github.com/markmead/hyperjs)
- [Hypercolor](https://github.com/jordihales/hypercolor)
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Highlight Hover Effect with Tailwind CSS]]></title>
        <id>highlight-hover-effect-with-tailwindcss</id>
        <link href="https://www.markmead.dev/blog/highlight-hover-effect-with-tailwindcss"/>
        <updated>2022-09-30T00:00:00.000Z</updated>
        <content type="html"><![CDATA[
On the web you might come across a hover effect where the element you are hovering has full opacity and the sibling elements have a lower opacity. It could look something like this.

![](/images/posts/highlight-hover-example.webp)

As you can see the second from the left item is at full opacity, while the others are faded.

## How?... in Tailwind CSS

Thanks to the new hideous syntax where we can write stuff like `[&:hover>li]` we can get this working quite easily, without any custom CSS 🎉

So what do we need?

1. Parent element that on hover lowers the opacity of child elements
2. Child elements that on hover override their opacity

Here's a simple version of that.

```html
<ul class="[&:hover>li]:opacity-50]">
  <li class="hover:!opacity-100">...</li>
  <li class="hover:!opacity-100">...</li>
  <li class="hover:!opacity-100">...</li>
  <li class="hover:!opacity-100">...</li>
</li>
```

There's not much happening here but let's break it down.

**`[&:hover>li]:opacity-50]`**

When the `ul` is on hover target the `li` elements and lower their opacity to `0.5`.

**`hover:!opacity-100`**

When the `li` element is on hover, force the opacity back to `1`. We force it with the `!` modifier which applies `!important`.

That's the base for any hover effect like this with Tailwind CSS, now we can take that logic and apply it to a built out design.

[Highlight Hover Example](https://play.tailwindcss.com/rc93nyfqOu?layout=preview)

---

One thing you'll notice, when hovering in the gaps between the `li` elements that one of them will be on hover, this is to ensure an element is highlighted when the cursor is within the `ul`.

You can get around this with JavaScript using something like the [Negative Hover](https://github.com/markmead/negative-hover) package that I wrote.
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Contribute to HyperUI]]></title>
        <id>how-to-contribute</id>
        <link href="https://www.markmead.dev/blog/how-to-contribute"/>
        <updated>2022-07-26T00:00:00.000Z</updated>
        <content type="html"><![CDATA[
For some, the idea of contributing to an open source project can be very daunting but please don't let that put you off. Let's walk through how you can contribute to HyperUI and get some open source work on your CV/GitHub.

## Spotted a Bug?

If you notice something that looks a little off:

- Spelling
- Accessibility
- SEO

Plus plenty more, then please do [create an issue](https://github.com/markmead/hyperui/issues/new/choose).

Once an issue has been created I can start working on a fix. However, if you'd like to work on the fix then let me know.

## Want to Add Something?

If you have something that you want to add to HyperUI then that's awesome, but before you dive too deep into the development, I'd recommend that you [create an issue](https://github.com/markmead/hyperui/issues/new/choose) to outline what it is that you are adding.

If you plan to add a new component then please include some examples of what the component will look like.

### Pull Request Feedback

Here's the scary part 👻

All pull requests need to be reviewed before being merged into HyperU, which does mean that on occasion there will be feedback. Please do not be disheartened by feedback, we're all developing each other's skillset and trying to make HyperUI (and other open source projects) better.

### Getting HyperUI Running Locally

HyperUI is a Next JS + Typescript project and can be set up quickly with the following commands.

```shell
git clone git@github.com:markmead/hyperui.git
yarn
yarn dev
```

If you are working on some changes that need to compile CSS, then you'll need to open a new terminal window and run the following.

```shell
yarn watch
```

### Creating a New Component

For this example, we will be adding a new footer component in the marketing category.

1. Create a new file in `/public/components/marketing-footers`
2. Add the new component to the components group in `/data/components/marketing-footers.mdx`

It should look like this.

```shell
components:
  21:
    title: An Amazing Footer
  22:
    title: My Awesome New Footer ✨
```

As you will see, component files are named incrementally, please follow this method.

If needed you can use `spacing: ...` to position the component within the preview, but note, that any classes added here will be ignored when copying or viewing the components code.

#### Notes on New Components

1. Components need to be written with Tailwind CSS
2. Don't make changes to the `/public/build.css`
3. Reference used Tailwind CSS plugins in the HTML

You can see examples of points 3 and 4 in the HTML of this [input component](https://www.hyperui.dev/components/application-ui/pagination#component-3).

### Creating a New Collection

If you want to create a new collection then please [create an issue](https://github.com/markmead/hyperui/issues/new/choose) on GitHub, then we can discuss the new collection and get some ideas for what components can be added.

### New Component Feedback

If you are looking to add a component to HyperUI then I will give feedback on both the design and development of the component.

For new component pull requests, I will review the work three times. If on the third review there is feedback from the first review that is still not addressed, then I will close it and ask for it to be re-opened once feedback has been addressed.

If on the third review there is new feedback then that's not an issue, it's only if you have continued to ignore feedback from the first review.

I believe this to be fair.

## Final Notes

Contributing to open source is one of the best feelings for a developer, but as mentioned, it can be very daunting. I really don't want anyone to feel that way with HyperUI, so please do get involved, and let's all push HyperUI to become a better project.
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Write Better Containers in Tailwind CSS]]></title>
        <id>how-to-write-better-containers-in-tailwindcss</id>
        <link href="https://www.markmead.dev/blog/how-to-write-better-containers-in-tailwindcss"/>
        <updated>2022-09-25T00:00:00.000Z</updated>
        <content type="html"><![CDATA[
Throughout HyperUI you will see the classes `max-w-screen-xl mx-auto px-4` used to contain content, this can be seen on the website and the components.

Some of you may be wondering...

> Why not use the `.container` class?

Great question.

Let's look at the `.container` class [documentation](https://tailwindcss.com/docs/container) on the Tailwind CSS website.

As we can see it provides `max-width` sizes at different breakpoints, which results in the content within the container snapping to that size as the breakpoint is reached.

[Container Example](https://play.tailwindcss.com/b5FKBhVHw7?layout=preview&size=1866x900)

If you shrink/expand the preview you will see the content within the container snapping.

## A More Fluid Container

Here's the same preview but using the classes I mentioned at the start of this blog post.

[Fluid Example](https://play.tailwindcss.com/vwHBxhrJMC?layout=preview&size=1866x900)

As you can see it's more fluid, you reach the breakpoint where `max-w-screen-xl` is no longer applied and then the padding is used to contain the content. If you wanted a fully fluid container you can remove the `max-w-screen-xl` class.

Let's compare the two.

[Container vs Fluid Example](https://play.tailwindcss.com/A7HdMDPg0O?layout=preview&size=1866x900)

An argument for the `.container` approach is that the content is wider on larger screens, but to solve that you can use `max-w-screen-2xl` instead of `max-w-screen-xl`.

## Edit the Config and Write Less Code

One final note, if you are using the `.container` approach and find yourself writing `container mx-auto` a lot, then you can do the following.

```js
theme: {
  container: {
    center: true,

    // Optional
    padding: {
      DEFAULT: '1rem',
      sm: '1.5rem',
      lg: '2rem'
    }
  },
}
```

---

Fun fact, I wrote a blog post in 2021 arguing the `.container` approach over using `max-w-screen-xl`, you can still read that.

[How to Write Better Tailwind CSS Containers - 2021](https://v1.markmead.dev/blogs/how-to-write-better-tailwindcss-containers)
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tips & Tricks for Writing Better Tailwind CSS]]></title>
        <id>how-to-write-better-tailwindcss</id>
        <link href="https://www.markmead.dev/blog/how-to-write-better-tailwindcss"/>
        <updated>2022-04-17T00:00:00.000Z</updated>
        <content type="html"><![CDATA[
Writing Tailwind CSS? Here are some tips and tricks that I apply when using Tailwind CSS to make my code look and perform better.

Got some tips to add to add? [Create a PR on GitHub](https://github.com/markmead/hyperui).

## Delegate Classes to Parent Element

### Incorrect

```html
<ul>
  <li class="text-sm font-medium whitespace-nowrap">First</li>
  <li class="text-sm font-medium whitespace-nowrap">Second</li>
  <li class="text-sm font-medium whitespace-nowrap">Third</li>
</ul>
```

### Correct

```html
<ul class="text-sm font-medium">
  <li class="whitespace-nowrap">First</li>
  <li class="whitespace-nowrap">Second</li>
  <li class="whitespace-nowrap">Third</li>
</ul>
```

---

## Remove Flex Classes on Mobile

### Incorrect

```html
<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
  <div>Hello</div>
  <div>World</div>
</div>
```

### Correct

```html
<div class="sm:flex sm:items-center sm:justify-between">
  <div>Hello</div>
  <div>World</div>
</div>
```

---

## Evenly Space Content with Flow Root

### Incorrect

```html
<ul class="space-y-8 divide-y">
  <li>First</li>
  <li class="pt-8">Second</li>
  <li class="pt-8">Third</li>
</ul>
```

### Correct

```html
<div class="flow-root">
  <ul class="-my-8 divide-y">
    <li class="py-8">First</li>
    <li class="py-8">Second</li>
    <li class="py-8">Third</li>
  </ul>
</div>
```

> But this is more code

True, however...

- Which one will make more sense in a few months time?
- How would the first example work with dynamic content?

---

## Avoid Margin Bottom for Spacing Content

### Incorrect

```html
<div>
  <div class="mb-4">Hello</div>
  <div>World</div>
</div>
```

### Correct

```html
<div>
  <div>Hello</div>
  <div class="mt-4">World</div>
</div>
```

> What is the benefit, they do the same thing?

Sure, but what if the content is dynamic and there's no second element? You'll end up with extra space below the first element.

---

## Remove Duplicate Spacing Classes with Parent Classes

### Incorrect

```html
<ul>
  <li>First</li>
  <li class="mt-8">Second</li>
  <li class="mt-8">Third</li>
</ul>
```

### Correct

```html
<ul class="space-y-8">
  <li>First</li>
  <li>Second</li>
  <li>Third</li>
</ul>
```

---

## Use the Accurate Transition Class

### Incorrect

```html
<button class="bg-red-500 transition-all hover:bg-red-600">Click</button>
```

### Correct

```html
<button class="bg-red-500 transition-colors hover:bg-red-600">Click</button>
```

> But the class name is longer?

Can't argue with that, but do you need `transition-all`? Probably not.

**If you want to save on class name length then use `transition` it will cover
99% of the transition effects you need.**

---

## Use Color Opacity Classes

### Incorrect

```html
<button class="relative">
  <span class="absolute inset-0 bg-red-500 opacity-50"></span>
  Click
</button>
```

### Correct

```html
<button class="bg-red-500 bg-opacity-50">Click</button>
<!-- With JIT -->
<button class="bg-red-500/50">Click</button>
```

---

## Split CSS Class Names onto Multiple Lines in CSS Files

### Incorrect

```css
.button {
  @apply inline-flex items-center rounded border text-sm px-5 py-3 transition hover:scale-105;
}
```

### Correct

```css
.button {
  @apply inline-flex items-center; // Layout
  @apply px-5 py-3 text-sm; // Spacing/Sizing
  @apply rounded border; // Style
  @apply transition; // Transition
  @apply hover:scale-105; // Interaction
}
```

> How is this better? It's more code...

Correct, but it's easier to read and it all gets compiled down.

---

## Avoid Creating Components in CSS Files

**Only applies if you are using a templating language that allows for
components, such as Blade, React, Liquid OR Vue.**

### Incorrect

```html
<div class="card">
  <div class="card-title">Title</div>
  <div class="card-body">Title</div>
  <div class="card-footer">
    <div class="card-timestamp">15/05/2025</div>

    <div class="card-actions">
      <button>Edit</button>
      <button>Delete</button>
    </div>
  </div>
</div>
```

And for the CSS...

```css
  .card {
    @apply p-4 rounded;
  }

  .card-title {
    @apply text-lg;
  }

  .card-body {
    @apply mt-1;
  }

  .card-footer {
    @apply flex items-center justify-between;
  }

  .card-timestamp {
    @apply text-sm;
  }

  .card-actions {
    @apply flex gap-4;
  }
</style>
```

### Correct

```html
<div class="p-4 rounded">
  <div class="text-lg">Title</div>
  <div class="mt-1">Title</div>
  <div class="flex items-center justify-between">
    <div class="text-sm">15/05/2025</div>

    <div class="flex gap-4">
      <button>Edit</button>
      <button>Delete</button>
    </div>
  </div>
</div>
```

---

## Use Max Width Classes When Restricting Width

### Inccrect

```html
<div class="w-auto sm:w-64">
  <div>Hello World</div>
</div>
```

### Correct

```html
<div class="max-w-sm">
  <div>Hello World</div>
</div>
```

> What's the benefit?

There's a few:

- They are responsive by default
- They better describe the layout

---

## Group Prefixed Class Names

### Incorrect

```html
<div class="\mt-4 sm:mt-0 text-lg sm:text-xl lg:text-3xl\">Hello World</div>
```

_Excuse the `\...\` it's to stop Headwind from formatting._

### Correct

```html
<div class="mt-4 text-lg sm:mt-0 sm:text-xl lg:text-3xl">Hello World</div>
```

You can use something like [Headwind](https://github.com/heybourn/headwind) to do this for you.

---

## Be Specific with Breakpoint Classes

### Incorrect

```html
<div class="items-center justify-between sm:flex">
  <div>Hello</div>
  <div>World</div>
</div>
```

### Correct

```html
<div class="sm:flex sm:items-center sm:justify-between">
  <div>Hello</div>
  <div>World</div>
</div>
```

> What's the issue here?

You are loading extra CSS on mobile that isn't being used. This might not seem drastic in this example but imagine the
whole frontend is written like the first example... That's a lot of extra CSS being loaded on mobile.

---

## Use Headwind and Tailwind CSS Intellisense

### Headwind

[GitHub Repo](https://github.com/heybourn/headwind)

- Sort Tailwind CSS class names
- Remove duplicate class names
- Move custom class names to end of class name list

### Tailwind CSS Intellisense

[GitHub Repo](https://github.com/tailwindlabs/tailwindcss-intellisense)

- Autocomplete Tailwind CSS class names (includes classes added in the Tailwind CSS config)
- Highlights errors with Tailwind CSS class names
- Displays the CSS generated with each Tailwind CSS class
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Add Text Shadow Support to Tailwind CSS]]></title>
        <id>text-shadow-with-tailwindcss</id>
        <link href="https://www.markmead.dev/blog/text-shadow-with-tailwindcss"/>
        <updated>2022-03-26T00:00:00.000Z</updated>
        <content type="html"><![CDATA[
It's worth noting that if you don't want to update the Tailwind CSS config, then you can use JIT to write the following.

```html
<h1 class="[text-shadow:_0_1px_0_rgb(0_0_0_/_40%)]">Hello</h1>
```

And if you still want to be able to use classes such as `shadow-red-500` you can do this.

```html
<h1 class="[text-shadow:_0_1px_0_var(--tw-shadow-color)]">Hello</h1>
```

## Why No Support? 🤷‍♂️

At the moment, there is no official support for `text-shadow` classes in Tailwind CSS and in fact, in a recent tweet Adam Wathan, the creator of Tailwind CSS said this:

> What CSS feature that Tailwind doesn't have baked in do you find yourself getting the most irrationally angry about? Need ideas for v3.1 😅

> In before `text-shadow` — harder than it sounds, one day, I'm sorry 👀

[View tweet on Twitter](https://twitter.com/adamwathan/status/1507431966412611591?s=20&t=augWHUcu8eIqNRWNCAAn9Q)

The reason for this is justified, it's not the implementation that's difficult (as you will see), it's the execution.

> The hard part is choosing the default shadows to include. I've spent probably 20 hours on the problem so far and still haven't come up with a good way to approach it. What are all the problems they solve, how many sizes do we need, do they need to support colors, etc.

[View tweet on Twitter](https://twitter.com/adamwathan/status/1507433677927727104?s=20&t=NTtEa-65fs_7MWFxra0Icw)

What to do while we wait? Easy. We'll do it ourselves.

## Adding Text Shadow Classes to Tailwind CSS

In your `tailwind.config.js` add the following:

```js
const plugin = require('tailwindcss/plugin')

module.exports = {
  theme: {
    extend: {
      textShadow: {
        sm: '0 1px 2px var(--tw-shadow-color)',
        DEFAULT: '0 2px 4px var(--tw-shadow-color)',
        lg: '0 8px 16px var(--tw-shadow-color)',
      },
    },
  },
  plugins: [
    plugin(function ({ matchUtilities, theme }) {
      matchUtilities(
        {
          'text-shadow': (value) => ({
            textShadow: value,
          }),
        },
        { values: theme('textShadow') }
      )
    }),
  ],
}
```

And that's it.

We can now write `text-shadow shadow-red-500` and have a beautiful red text shadow appear, fully created with Tailwind CSS and zero custom CSS.

All I did was follow the [adding plugins documentation](https://tailwindcss.com/docs/plugins#adding-utilities) and it worked.

Our code added the following Tailwind CSS classes:

- `text-shadow`
- `text-shadow-sm`
- `text-shadow-lg`

But you can add as many as you like.

The classes that have been added will appear in [Tailwind CSS IntelliSense](https://tailwindcss.com/docs/editor-setup#intelli-sense-for-vs-code) when writing something like `text-sh` for example.

It's worth noting the use of `var(--tw-shadow-color)`. This is important as it allows us to use Tailwind CSS `shadow-[color]` classes with the `text-shadow` classes we've added.

Something else to note is we can use arbitrary values such as; `text-shadow-[0_4px_8px_#6366f1]` to create text shadows.

Want to see more? You can view the [full example](https://play.tailwindcss.com/wJi9jhaOyb) on the Tailwind CSS play sandbox.
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What's New in HyperUI? Biggest Update Yet!]]></title>
        <id>whats-new-in-hyperui</id>
        <link href="https://www.markmead.dev/blog/whats-new-in-hyperui"/>
        <updated>2022-03-13T00:00:00.000Z</updated>
        <content type="html"><![CDATA[
## What is HyperUI?

HyperUI is a collection of free Tailwind CSS components that are open source.

## HyperUI v2

The new version of HyperUI loads faster, is friendlier for developers that want to contribute and now has a great base to build from in 2022.

### File Management

#### Goodbye JavaScript

It's worth understanding how HyperUI created pages such as `/components/footers` before the update. This was managed through JavaScript arrays and helper functions that I'd use with `getStaticProps`. Here is how that looked:

```js
export async function getStaticProps({ params: { id } }: Params) {
  const collection = currentCollection(id)
  const components = currentCollectionComponents(id)

  return {
    props: {
      collection,
      components,
    },
  }
}
```

You can view how this code works in [/lib/collections.ts](https://github.com/markmead/hyperui/blob/464b9670faeb7aa0d4bba79e39a1cc3a6a70cdb8/lib/collections.ts).

This is taking in the `id` from the URL, for example `footers` and finding the `footers` object in the collections array, it then gets the collection data and components which are then used for rendering.

This works fine but if I wanted to add specific content to `/components/footers` I'd need to update multiple files. Therefore, this is not friendly for contributors and has a massive drawback in that you can't update collections individually.

Here is a preview of how the collections and components array would look:

**Collections**

```js
const collections = [
  {
    name: 'Alerts',
    id: 'alerts',
    emoji: '🚨',
    spacing: 'max-w-sm mx-auto p-8',
    count: alertComponents.length,
    components: alertComponents,
  },
  // ...
]
```

[View the full file](https://github.com/markmead/hyperui/blob/464b9670faeb7aa0d4bba79e39a1cc3a6a70cdb8/lib/collections.ts).

**Alerts Component**

```js
const alerts = [
  { id: 1, title: 'Simple' },
  { id: 2, title: 'With Description' },
  { id: 3, title: 'With List' },
  { id: 4, title: 'With Close' },
  { id: 5, title: 'With Accent' },
  { id: 6, title: 'With Icon, Content and Close' },
  { id: 7, title: 'Dark with Icon' },
]
```

[View the full file](https://github.com/markmead/hyperui/blob/464b9670faeb7aa0d4bba79e39a1cc3a6a70cdb8/lib/components.ts).

#### Hello Markdown

I knew I wanted to use markdown and specifically MDX after using [next-mdx-remote](https://github.com/hashicorp/next-mdx-remote) on the [HyperJS website](https://www.hyperjs.dev/).

The rebuild needed to replicate what was currently working on HyperUI, therefore the checklist would be:

- Manage Collection
- Manage Components
- Collection Spacing
- Component Spacing

And the new features I wanted are:

- Manage SEO Content
- Isolated Content

If you take a look at the [data/components folder](https://github.com/markmead/hyperui/tree/main/data/components) you will notice each collection has their own MDX file. This instantly ticks "Isolated Content" off the checklist.

The rest of the checklist can be handled with frontmatter. If you're not sure what frontmatter is, it's key/value pairs within a YAML block. As HyperUI used JavaScript objects for collections, all of the data was in key/value pairs already.

Here's how the MDX file looked with the collection, components and SEO data:

```shell
---
title: Announcements
emoji: 📣
spacing: flex flex-col gap-4
seo:
  title: Announcement Components
  description: Announcement components created with Tailwind CSS
components:
  1:
    title: Simple
  2:
    title: With Icon
  3:
    title: Floating with Close
    spacing: relative
  4:
    title: With Slider
---

# Announcement Components

<List items={examples} name={name} spacing={spacing} />
```

This has now ticked everything off the checklist as it's taken the old collection object writing JavaScript and converted it to frontmatter.

### Collection Content

Thanks to the `.prose` class from Tailwind CSS, the process of adding content has been streamlined. The days of adding content to JavaScript files and conditionally rendering the content are in the past, now all I have to do is write markdown.

### Speed, Speed and Speed

It's no secret to me that HyperUI needed a performance rework and in HyperUI v2 I'm pleased to say there has been some massive improvements.

All of these changes has seen results of HyperUI loading **5-8x faster** and now has **100/100** Lighthouse scores across the board.

#### Component Loading

For reference, HyperUI loads components by using `fetch` to grab the HTML from `/components/[collection]/[id].html` and then render the response in an `<iframe>`.

For example, if you went to `/components/alerts` HyperUI would do the following:

```js
fetch('/components/alerts/1.html')
fetch('/components/alerts/2.html')
// ...
fetch('/components/alerts/7.html')
```

And this would all happen on page load. Not great, right? Especially when you consider some collections have 10+ components.

Fixing this was something I've tried in the past but for some reason I could not get `intersectionObserver` to play nice. Enter [react-intersection-observer](https://github.com/thebuilder/react-intersection-observer).

How does it work now?

You land on `/components/alerts` and the first component loads `fetch('/components/alerts/1.html')`. Start scrolling and as components enter the viewport another `fetch` is fired off for that component.

When I saw this working I was beyond thrilled! I ran a test and pages were loading 5-8x faster. It's a testament to [react-intersection-observer](https://github.com/thebuilder/react-intersection-observer) that it worked this well out of the box, I only changed one setting and that was to stop `fetch` being re-called when scrolling back up.

#### Less Renders

If you're wondering how HyperUI passes the CSS to these components it's quite simple.

When the component HTML is fetched it adds in:

```html
<head>
  <link rel="stylesheet" href="/build.css" />
</head>
```

Currently, `/build.css` is a tiny file and doesn't have too much of an impact on the performance. However, one thing I noticed was `/build.css` being loaded in each time you toggled back to the preview of the component from the source code.

This was happening because the component was being re-rendered as it was wrapped in:

```shell
{view ? <Preview /> : <Code />}
```

I've changed this now to use CSS class names to toggle between the preview and the source code, this results in `/build.css` not being re-loaded.

#### Bug Fixes

During the rebuild I noticed that components were loaded multiple times.

For example, `/components/alerts` has 7 components but there were times that 14/21 requests were sent. This was an issue for speed and one that I'm surprised didn't show up earlier, although it might have been created in the rebuild process.

This was fixed by adding `[id]` to the `useEffect` hook that was fetching the component data. Small change, but has resulted in a big improvement.

#### Limit Passed Data

As I was updating HyperUI I noticed there was a few cases of unnecessary data being passed via props. The biggest culprit was the collection cards.

In the past these would received the entire collection object as a prop, however, with the new update to HyperUI you specify what attributes you want back and only they will be returned, therefore limiting the data that is passed around.

Currently that filtering is an optional parameter on the helper function, in the future I'll be making it required.

### UI Updates

You'll notice a few changes to the UI, these are quite minimal:

- Loading Indicator for Components
- Improved Collection Page
- Improved Mobile Menu
- New Component Card
- Removed Search (will return with a better UI)
- Removed Favourites (wasn't used)
- Removed Breadcrumb

### General Updates

There were a few updates that happened during the build that weren't related to the build:

- Improve Typescript Checking
  - More Interfaces
  - More Type Checks
- Improve SEO
- Removed Unused Packages

And that's all I can remember. There was so much to this update and it's given HyperUI a fantastic base to build on for 2022. I've already added a few components to HyperUI after the rebuild went live and I can confirm the process has improved greatly.

I can't wait to see how far HyperUI can go in 2022.
]]></content>
        <author>
            <name>Mark Mead</name>
            <uri>https://www.markmead.dev/</uri>
        </author>
    </entry>
</feed>