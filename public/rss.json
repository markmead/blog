{
    "version": "https://jsonfeed.org/version/1",
    "title": "Mark Mead",
    "home_page_url": "https://www.markmead.dev/feed.xml",
    "feed_url": "https://www.markmead.dev/json",
    "description": "RSS feed for blog posts.",
    "icon": "https://www.markmead.dev/og.png",
    "author": {
        "name": "Mark Mead",
        "url": "https://www.markmead.dev/"
    },
    "items": [
        {
            "id": "alpinejs-plugin-textarea-autogrow",
            "content_html": "\nAt some point in your development career you will most likely be asked to make a `<textarea>` autogrow with the value that the user has inputted.\n\nThere are a few approaches you can take when creating this functionality but the most common is a JavaScript function similair to this.\n\n```js\nfunction textareaAutogrow() {\n  let el = event.currentTarget\n\n  el.style.height = 'auto'\n  el.style.height = `${el.scrollHeight}px`\n}\n```\n\nIt's simple, clean and easy to use.\n\nHow do we take this and translate it to Alpine JS?\n\nLet's start with a solution that uses the same code as the JavaScript example, but written with Alpine JS.\n\n## Basic Alpine JS Example\n\n```html\n<textarea\n  x-data=\"{\n    resize: () => {\n      $el.style.height = 'auto';\n      $el.style.height = `${$el.scrollHeight}px`\n    }\n  }\"\n  x-init=\"resize()\"\n  @input=\"resize()\"\n></textarea>\n```\n\nWhat's happening here?\n\nWe have the `x-data` context initialising a `resize()` function which has the same logic as our JavaScript example. This function is then called when the Alpine JS component initialises and again everytime the `input` DOM event is dispatched.\n\nGreat, this works but does it tick the three boxes of the JavaScript example?\n\n**Simple**\n\nYes. It's standard Alpine JS, minus the creation of a function in an x-data context.\n\n**Clean**\n\nNo. It's added a extra complexity and bloat to your HTML which makes it much harder to quickly read through.\n\n**Reusable/Easy**\n\nNo. It's not DRY and that's not something I'd want to be using, especially in HTML where things can often change.\n\n## Extracting Alpine JS Logic Example\n\nLet's take the logic we just wrote and extract it into it's own Alpine JS data context function. Here's what that would look like.\n\n```html\n<textarea x-data=\"grow\"></textarea>\n```\n\nAnd the Alpine JS directive.\n\n```js\ndocument.addEventListener('alpine:init', () => {\n  Alpine.data('grow', () => ({\n    init() {\n      this.resize()\n      this.$el.addEventListener('input', () => this.resize())\n    },\n    resize() {\n      this.$el.style.height = 'auto'\n      this.$el.style.height = `${this.$el.scrollHeight}px`\n    },\n  }))\n})\n```\n\nThis looks much better!\n\nHandling it with this approach allows us to add `x-data=\"grow\"` without having to write the functionality over and over again. However... Let's take the following example.\n\n```html\n<textarea\n  x-data=\"{ valid: false, grow }\"\n  :class=\"{ 'border-green-500': valid }\"\n></textarea>\n```\n\nHere we have a `valid: false` which handles adding/removing a CSS class.\n\nWill the CSS work? Yes.\n\nWill the autogrow functionality work? No.\n\nThere's probably a way to fix this, but for now I have a different solution.\n\n## Alpine JS Plugin Example\n\nI've created an Alpine JS plugin called [Alpine JS Textarea Autogrow](https://github.com/markmead/alpinejs-textarea-autogrow) that handles this functionality with an Alpine JS directive.\n\nWhat this means is we can add this functionality like this.\n\n```html\n<textarea x-data x-grow></textarea>\n```\n\nHere we are initialising an Alpine JS component with `x-data` which is required to initialise the Alpine JS component. We then use `x-grow` which is an Alpine JS directive provided by the plugin to handle the autogrow functionality.\n\nUnder the hood `x-grow` is the JavaScript example showcased at the start of this blog post.\n\nSomething to ask is \"Why would I use a plugin for something like this?\" which is a great question. Here's some reasons.\n\n- Simple, clean and easy to use\n- No HTML bloat\n- Very small JavaScript package (0.000344 MB)\n- Allows for full use of `x-data`\n\nAll of these examples have their use cases, but if I were to create a list of best to worst approaches it would be.\n\n1. Alpine JS Plugin - [Alpine JS Textarea Autogrow](https://github.com/markmead/alpinejs-textarea-autogrow)\n2. Extracting Alpine JS Logic\n3. JavaScript\n4. Basic Alpine JS\n",
            "url": "https://www.markmead.dev/blog/alpinejs-plugin-textarea-autogrow",
            "title": "How to Autogrow Textarea with Alpine JS (+ New Plugin)",
            "summary": "Easily create an autogrowing textarea with Alpine JS.",
            "date_modified": "2022-06-09T23:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "alpinejs-shopify-clear-cart-api",
            "content_html": "\nRecently, I've been using a lot of Alpine JS when developing Shopify themes and\nso far it's worked very well.\n\nThanks to the latest version of Alpine JS (version 3) we now have access to\nAlpine JS stores by default! 🥳\n\n[Alpine JS Stores Documentation](https://alpinejs.dev/globals/alpine-store)\n\nThis means that we can create a source of truth for particular state management,\nin this case the Shopify cart.\n\nLet's create a new Alpine JS store called \"cart\" that we will place in either\n`assets/theme.js` or `layouts/theme.liquid`.\n\n_If you are using `assets/theme.js` then you will need to import Alpine JS as a\nmodule._\n\nHere's our Alpine JS store for the cart.\n\n```js\nAlpine.store('cart', {\n  data: null,\n\n  clearCart() {\n    fetch('/cart/clear.js, { method: 'POST' })\n      .then((response) => response.ok && this.getCart())\n  },\n\n  getCart() {\n    fetch('/cart.js')\n      .then((response) => response.json())\n      .then((data) => this.data = data)\n      .catch((error) => console.error(error))\n  }\n})\n```\n\nLet's breakdown what this is doing.\n\n| ID          | Type     | Description                                               |\n| ----------- | -------- | --------------------------------------------------------- |\n| `data`      | Variable | Keeps all the cart data that is set from `getCart`        |\n| `clearCart` | Function | Clears the cart and then calls `getCart` once finished    |\n| `getCart`   | Function | Gets the current cart and saves it to the `data` variable |\n\nOnce question you might have is why do we call `getCart` after clearing? This is\nso we can reset the `data` variable.\n\nThere's another approach to doing this with `response.ok && this.cart = null`\nbut the approach is your choice, they're both very quick.\n\nThe last part is the HTML, thankfully Alpine JS exposes the store in a `$store`\nvariable. Therefore, we can create a button that clears the cart with the\nfollowing code.\n\n```html\n<button x-data type=\"button\" @click=\"$store.cart.clearCart\">Clear Cart</button>\n```\n\nAnd that's that. You can now take `$store.cart.clearCart` and place that where\nyou need to clear the cart in your Shopify store.\n\n_If the clear cart button is within a `form` then you'll need to add\n`type='button'` to the button to prevent it from submitting the form._\n\nIf you are using this on the cart page or within a cart popup/drawer then you'll\nwant to handle the UI to show the user that the cart has been emptied.\n",
            "url": "https://www.markmead.dev/blog/alpinejs-shopify-clear-cart-api",
            "title": "How to Clear the Shopify Cart with Alpine JS",
            "summary": "Find out how to clear the Shopify cart with Alpine JS and the Shopify API.",
            "date_modified": "2021-12-10T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "alpinejs-shopify-product-data-api",
            "content_html": "\nIn this post we will go over two methods of getting product data from the\nShopify API with Alpine JS.\n\nIf you've been using Dawn, the new open-source theme from Shopify that makes use\nof Shopify 2.0, you may have seen the following code.\n\n```html\n<script type=\"application/json\">\n  {{ product | json }}\n</script>\n```\n\nThis will render the product data as JSON which we can then get via JavaScript.\n\n```js\nJSON.parse(document.querySelector('[type=\"application/json\"]').textContent)\n```\n\nThis approach works great and is a new concept to me, so thanks Shopify 🙌\n\nThe next step with this process is getting the data into Alpine JS, for that we\ncan use `Alpine.data()`.\n\n```html\n<div x-data=\"product\">\n  <h1>Product Title</h1>\n\n  <p x-text=\"variant.title\"></p>\n\n  <p x-money=\"variant.price\"></p>\n\n  <form>\n    <input type=\"text\" name=\"id\" x-model=\"variant.id\" />\n\n    <button type=\"submit\">Add to Cart</button>\n  </form>\n\n  <script type=\"application/json\">\n    {{ product | json }}\n  </script>\n</div>\n\n<script>\n  document.addEventListener('alpine:init', () => {\n    Alpine.data('product', () => ({\n      data: '',\n      variant: '',\n\n      init() {\n        this.data = JSON.parse(\n          document.querySelector('[type=\"application/json\"]').textContent\n        )\n\n        this.activeVariant()\n        this.listenForChange()\n      },\n\n      activeVariant() {\n        const variantId = this.getVariantParam()\n\n        this.variant = variantId\n          ? this.data.variants.find((variant) => variant.id === variantId)\n          : this.data.variants[0]\n      },\n\n      listenForChange() {\n        document.addEventListener('change', () => {\n          this.activeVariant()\n        })\n      },\n\n      getVariantParam() {\n        const params = new URLSearchParams(window.location.search)\n        const variantId = Number(params.get('variant'))\n\n        return variantId\n      },\n    }))\n  })\n</script>\n```\n\n`x-money` is an custom Alpine JS directive that replicates the `| money` filter.\nCheck it out here [Alpine JS Money](https://github.com/markmead/alpinejs-money).\n\nFirst off, everything happens in the `init()` function from Alpine JS.\n\n```js\ninit() {\n  this.data = JSON.parse(\n    document.getElementById('productData').textContent\n  )\n\n  this.activeVariant()\n  this.listenForChange()\n}\n```\n\nFirst, we are setting the `data` variable value to be the JSON product data that\nwe can get from Liquid.\n\nThen there's the two functions; `activeVariant()` and `listenForChange()`.\n\nHere's what they're doing.\n\n**`activeVariant()`**\n\nThis function calls another function `getVariantParam()` which returns the\nvariant param from the URL, this value is then set to a local variable of\n`variantId`.\n\nIf then checks the variants array in the `data` object for a match based on the\n`variantId`, if no match was found it defaults to the first variant in the\nvariants array. It then sets the `variant` variable to the variant that's\nreturned.\n\n_The variants array is included within `{{ product | json }}`_\n\n**`listenForChange()`**\n\nThis sets up a `change` event listener on the document that calls\n`activeVariant()`, which allows us keep the `variant` variable up to date with\nuser changes in the product form.\n\n## Get Shopify Product Data with Async/Await\n\nThis is an alternative approach that uses the Shopify API and doesn't require\nmany changes. It's worth noting that if you've added the following then you\nshould be OK to remove it.\n\n```html\n<script type=\"application/json\">\n  {{ product | json }}\n</script>\n```\n\n_Please do not remove this if you are using Dawn, or it was already in your\ntheme._\n\nUsing the Shopify API for this is as simple as updating the way we get the JSON\nproduct data in the `init()` function.\n\nHere's the new function.\n\n```js\nasync init() {\n  const res = await fetch('/products/{{ product.handle }}.js')\n  const data = await res.json()\n\n  this.data = data\n\n  this.activeVariant()\n  this.listenForChange()\n}\n```\n\nThis is using the Shopify API endpoint for the current product and gets the\n`data` from the response. Then we set the `data` variable to the data that is\nreturned.\n\nFrom there it's business as usual.\n\nWhich way is better? That's a personal choice. Personally, I prefer the first\nmethod of using `{{ product | json }}` as it's the approach Shopify have taken\nwith Dawn and once explained, I believe it's easier to understand.\n\nWith the new Dawn theme, it ships with JavaScript that handles what's included\nin the basic example in this post. However, if you wanted to extend that then\nyou have to start editing the base JavaScript that Shopify has shipped with\nDawn.\n\nThis isn't a huge issue and in fact is a great way to learn more about the Dawn\ntheme, but you can easily run into complications. Therefore, I believe it's\nbetter to run Alpine JS alongside the Dawn JavaScript and gradually replace what\nit.\n",
            "url": "https://www.markmead.dev/blog/alpinejs-shopify-product-data-api",
            "title": "How to Get Product Data from Shopify with Alpine JS",
            "summary": "Learn how you can use Alpine JS to fetch product data in Shopify.",
            "date_modified": "2021-12-30T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "jumpstart-javascript-variables",
            "content_html": "\n## Which One Should I Use?\n\nStart out using `const` for every variable and then switch to `let` when the\nvariable needs to be re-assigned.\n\nAvoid using `var` as it doesn't have block scope.\n\n## Const Overview\n\nUse `const` when you don't want the variable to be re-assigned.\n\n```js\nconst name = 'John'\n\nname = 'Jane'\n```\n\nThis will error as the `name` variable cannot be re-assigned.\n\nHowever, it still allows for mutation on arrays and objects.\n\n```js\n// Array\nconst people = ['John', 'Jane']\n\npeople.push('Jim')\n\n// Object\nconst person = {\n  name: 'John',\n  age: 20,\n}\n\nperson.name = 'Jim'\n```\n\nBoth of these will work and update the variable as it's being mutated, not\nre-assigned.\n\n[Understanding Immutability in JavaScript - Kingsley Silas](https://css-tricks.com/understanding-immutability-in-javascript/)\n\n## Let Overview\n\nUse `let` when you want to re-assign the variable.\n\n```js\nlet name = 'John'\n\nname = 'Jane'\n```\n\nThe `name` variable will now be \"Jane\".\n\n## Var Overview\n\n> Avoid using `var` whenever possible as it lacks block scoping.\n\n## What is Block Scope?\n\nIn short, a block is defined by curly brackets (`{}`).\n\nThe most common of these are functions, if statements and loops.\n\n```js\nfunction addPerson() {}\n\nif (true) {\n}\n\nfor (let person of people) {\n}\n```\n\nWhen using `var` it doesn't have block scoping.\n\n```js\nvar name = 'John'\n\nfunction addPerson() {\n  name = 'Jane'\n}\n\nconsole.log(name)\n```\n\nThe `name` variable will now be \"Jane\" as it was re-assigned in the function.\nThis is problematic as it becomes difficult to understand where the change\nhappens.\n\nHowever, when using `let` or `const` this is not the case.\n\n```js\nlet name = 'John'\n\nfunction addPerson() {\n  name = 'Jane'\n}\n\nconsole.log(name)\n```\n\nThe `name` variable will remain as \"John\".\n\nThis scoping allows for the variable names to be reused.\n\n```js\nlet name = 'John'\n\nfunction addPerson() {\n  let name = 'Jane'\n\n  console.log(name)\n}\n\nconsole.log(name)\n\naddPerson()\n```\n\nThis is absolutely fine and will result in \"John\" and \"Jane\" being logged to the\nconsole.\n",
            "url": "https://www.markmead.dev/blog/jumpstart-javascript-variables",
            "title": "Jumpstart JavaScript - Variables",
            "summary": "Beginner friendly overview of how to declare variables in JavaScript.",
            "date_modified": "2022-02-01T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "laravel-livewire-recaptcha-v2",
            "content_html": "\n**Before you can write any code you'll need to be setup with Google reCaptcha.**\n\nWhen you're setup you'll want to add the Google reCaptcha API key and secret to\nthe project, I've added mine in `config/services.php`.\n\n```php\n'recaptcha' => [\n    'key' => env('RECAPTCHA_API_KEY'),\n    'secret' => env('RECAPTCHA_SECRET_KEY'),\n],\n```\n\nNow we can reference them like so.\n\n```php\nconfig('services.recaptcha.key')\nconfig('services.recaptcha.secret')\n```\n\n---\n\n## Initialising Google reCaptcha\n\nWe need to add the Google reCaptcha JavaScript code to our project. Inside the\nlayout add the following to the `<head>`.\n\n```html\n<script\n  src=\"https://www.google.com/recaptcha/api.js?onload=handleRecaptchaLoad&render=explicit\"\n  async\n  defer\n></script>\n```\n\nHere we're declaring there's an `onload` event which triggers the\n`handleRecaptchaLoad` function.\n\nAdd the following before the `</body>` tag.\n\n```html\n<script>\n  let captchaIds = ['recaptchaA', 'recaptchaB', 'recaptchaC', 'recaptchaD']\n\n  function handleRecaptchaLoad() {\n      captchaIds.forEach((captchaId) => {\n          if (!document.getElementById(captchaId)) {\n              return\n          }\n\n          grecaptcha.render(\n              captchaId, {\n                  'sitekey': '{{ config('services.recaptcha.key') }}',\n                  'callback': `${captchaId}Submit`\n              }\n          )\n      })\n  }\n\n  window.addEventListener('reset-google-recaptcha', () => {\n      captchaIds.forEach((captchaId) => {\n          if (!document.getElementById(captchaId)) {\n              return\n          }\n\n          grecaptcha.reset(captchaId)\n      })\n  })\n</script>\n```\n\n**What's Happening?**\n\nThe `handleRecaptchaLoad` function loops through the `captchaIds` array and does\nthe following.\n\n- Checks an element exists with that `id`\n- Initalises and renders a Google reCaptcha on that element\n- Adds a callback to the function based on the `id`\n\nThis will create callback function name such as `recaptchaASubmit`.\n\n**Why This Approach?**\n\nThis allows for multiple Google reCaptcha components on the same page without\nthem interfering with eachother.\n\nIt works fine with a single Google reCaptcha component as well, but if you want\nto remove the extra code, you do this.\n\n```js\nfunction handleRecaptchaLoad() {\n    grecaptcha.render(\n        captchaId, {\n            'sitekey': '{{ config('services.recaptcha.key') }}',\n            'callback': 'recaptchaComponentSubmit'\n        }\n    )\n}\n\nwindow.addEventListener('reset-google-recaptcha', () => {\n    grecaptcha.reset('recaptchaComponentSubmit')\n})\n```\n\nThere's an event listener on the window which listens for a custom event\n`reset-google-recaptcha`, when this is triggered it will reset the Google\nreCaptcha components. This is required when using Livewire as the page does not\nreload.\n\n## Google reCaptcha Blade Component\n\nWe need to add some markup for the Google reCaptcha to hook into, I've done this\nas a Blade component.\n\n```blade\n@props(['id'])\n\n@push('scripts')\n    <script>\n        function {{ $id }}Submit(captchaToken) {\n            @this.handleRecaptcha(captchaToken)\n        }\n    </script>\n@endpush\n\n<div>\n    <div id=\"{{ $id }}\"\n         wire:ignore></div>\n\n    @error('recaptcha')\n        {{ $message }}\n    @enderror\n</div>\n```\n\n**What's Happening?**\n\nThis component accepts a single prop of `id` and does the following:\n\n- Creating a unique function through the `id` prop\n- Pushing that unique function to the `scripts` stack\n\nThis unique function matches up to the callback functions declared in the\n`handleRecaptchaLoad` function.\n\n**Talking to Livewire**\n\nThrough the use of `@this.handleRecaptcha(captchaToken)` we are passing the\nresponse from the Google reCaptcha (`captchaToken`) to Livewire.\n\n_If you haven't already make sure you add `@stack('scripts')` to your layout._\n\n### Connecting to a Livewire Component\n\nWe now need to hook the Google reCaptcha component to Livewire. In this example\nI'll be using a Livewire component called `Contact.php`.\n\nFirst, we need to add the Blade component to the form within\n`livewire/contact.blade.php`.\n\n```html\n<form>\n  <x-form.recaptcha id=\"contactRecaptcha\" />\n</form>\n```\n\nOn the Livewire component it needs state and methods so it can track if the\nGoogle reCaptcha has been verified and handle submitting the form.\n\n```php\nclass Contact extends Component\n{\n    use InteractsWithRecaptcha;\n\n    public $recaptcha = false;\n\n    protected $rules = [\n        'recaptcha' => 'accepted',\n    ];\n\n    protected function messages()\n    {\n        return [\n            'recaptcha.accepted' => 'reCaptcha is required.',\n        ];\n    }\n\n    public function handleRecaptcha($captchaToken)\n    {\n        $this->recaptcha = $this->validateRecaptchaRequest($captchaToken);\n    }\n\n    public function submitForm()\n    {\n        $this->validate();\n\n        $this->reset();\n\n        $this->resetRecaptchaComponent();\n\n        session()->flash('contact.success', 'Message sent!');\n    }\n\n    public function render()\n    {\n        return view('livewire.contact');\n    }\n}\n```\n\nWe're using a custom trait called `InteractsWithRecaptcha`.\n\nIt's not required but if you're working with multiple Google reCaptcha\ncomponents then it's recommended.\n\nHere's what that looks like.\n\n```php\ntrait InteractsWithRecaptcha\n{\n    public function validateRecaptchaRequest($captchaToken)\n    {\n        $captchaResponse = Http::asForm()->post('https://www.google.com/recaptcha/api/siteverify', [\n            'secret' => config('services.recaptcha.secret'),\n            'response' => $captchaToken,\n        ])->json();\n\n        return $captchaResponse['success'];\n    }\n\n    public function resetRecaptchaComponent()\n    {\n        $this->dispatchBrowserEvent('reset-google-recaptcha');\n    }\n}\n```\n\nIn the `handleRecaptcha` function on the Livewire component we are calling\n`validateRecaptchaRequest` which hits the Google reCaptcha API endpoint to\nverify the request and return if it was a successful or not.\n\nOn the Livewire component, the returned value from the API becomes the\n`recaptcha` state.\n\nIf it returns `false` then the validation will fail when the form is submitted,\nif it's `true` then the form will submit.\n\nWhen the form submits we are using the Livewire function `reset()` to reset the\nLivewire components state, we are then calling the `resetRecaptchaComponent` on\nthe trait, which uses the Livewire `dispatchBrowserEvent` function to emit the\nevent `reset-google-recaptcha` to the DOM window.\n\nWhen `reset-google-recaptcha` is triggered it resets the Google reCaptcha\ncomponents.\n\n---\n\nAnd there we have it, a working Google reCaptcha with Livewire.\n\nHopefully this isn't too confusing, there's a lot of pieces talking to eachother\nspread across files, but once the logic has been added to the project it becomes\na lot easier to follow.\n",
            "url": "https://www.markmead.dev/blog/laravel-livewire-recaptcha-v2",
            "title": "How to Use Google reCaptcha v2 with Livewire",
            "summary": "Protect your forms with Google reCaptcha v2 with Livewire.",
            "date_modified": "2022-09-04T23:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "ruby-rails-ultimate-cheatsheet",
            "content_html": "\n# The Ultimate Ruby on Rails\n\nCheat Sheet & Code Snippets\n\n## General\n\n### Create a Rails Application\n\n```shell\nrails new my-app\n```\n\n### See the Options Available for Creating a Rails Application\n\n```shell\nrails new --help\n```\n\n### Start Rails Server\n\n```shell\nrails s\n```\n\n### Start Rails Console\n\n```shell\nrails c\n```\n\n### Start Rails Console without Database Saving\n\nThis stops changes from saving while in the `rails console`\n\n```shell\nrails c --sandbox\n```\n\n### View and Search Rails Routes in the Browser\n\n```shell\nlocalhost:3000/rails/info/routes\n```\n\n### View Application Information in the Browser\n\n```shell\nhttp://localhost:3000/rails/info/properties\n```\n\n## Bundle\n\n### Install Ruby Gems in Gemfile\n\n```shell\nbundle install\n```\n\n### Install Ruby Gem\n\n```shell\nbundle add devise\n```\n\n### Update ALL Ruby Gems\n\n```shell\nbundle update\n```\n\n### Update Ruby Gem\n\n```shell\nbundle update devise\n```\n\n### Remove Ruby Gem\n\n```ruby\nbundle remove devise\n```\n\n### Execute Bundle Command in Context of Application Gemfile\n\n```ruby\nbundle exec ...\n```\n\n## Generators\n\n### Create Controller\n\nCreates a `controllers/pages_controller.rb` with the `home` and `about` action\nwith view files\n\n```shell\nrails g controller pages home about\n```\n\n### Create Migration\n\nCreates the migration to add the column `publish_date (date)` to the `projects`\ntable\n\n```shell\nrails g migration add_publish_date_to_projects publish_date:date\n```\n\n### Create Model\n\nCreates a `models/project.rb` file and a migration to create the `projects`\ntable with the columns `title (string)` and `body (text)`\n\n```shell\nrails g model project title body:text\n```\n\n### Create Scaffold\n\nDoes everything that `rails g controller` and `rails g model` would do\n\n```shell\nrails g scaffold projects title body:text\n```\n\n### Create Rake Task\n\nCreates a `lib/rake/projects.rake` file that includes the `trim_title` method,\nyou can call this method with `rake projects:trim_title`\n\n```shell\nrails g task projects trim_title\n```\n\n### Create Mailer\n\nCreates a `mailers/user_mailer.rb` file with a `thanks_for_joining` action with\ncorresponding view files; `views/user_mailer/thanks_for_joining.txt.erb` and\n`views/user_mailer/thanks_for_joining.html.erb`\n\n```shell\nrails g mailer user thanks_for_joining\n```\n\n## Destroy\n\nThink of destroy as the opposite of generate. It'll figure out what generate\ndid, and undo it\n\n### Destroy Controller\n\n```shell\nrails d controller Pages\n```\n\n### Delete Model\n\n```shell\nrails d model Article\n```\n\n### Delete Scaffold\n\n```shell\nrails d scaffold Projects\n```\n\n### Delete Mailer\n\n```shell\nrails d mailer User\n```\n\n## Database\n\n### Create the Database\n\n```shell\nrails db:create\n```\n\n### Drop the Database\n\n```shell\nrails db:drop\n```\n\n### Migrate the Database\n\n```shell\nrails db:migrate\n```\n\n### Get Statuses of All Database Migrations\n\n```shell\nrails db:migrate:status\n```\n\n### Rollback Last Database Migration\n\n```shell\nrails db:rollback\n```\n\n### Rollback Multiple Database Migrations\n\n```shell\nrails db:rollback STEP=5\n```\n\n### Redo Database Migration\n\nThis does the following; rollback and migration the database\n\n```shell\nrails db:migrate:redo\n```\n\nRuns `db:rollback` and `db:migrate`\n\n### Seed the Database\n\nRuns the `db/seeds.rb` file\n\n```shell\nrails db:seed\n```\n\n### Reset the Database\n\nThis does the following; drops, create, migrates and seeds the database\n\n```shell\nrails db:reset\n```\n\n### Change Database to PostgresQL\n\n```shell\nrails db:system:change --to=postgresql\n```\n\n### Rest Database Table ID Count\n\n```ruby\nActiveRecord::Base.connection.reset_pk_sequence!('table_name')\n```\n\n### Reset ALL Database Tables ID Count\n\n```ruby\nActiveRecord::Base.connection.tables.each do |t|\n  ActiveRecord::Base.connection.reset_pk_sequence!(t)\nend\n```\n\n### Populate a New Table in a Database Migration\n\n```ruby\nclass CreatePostCategories < ActiveRecord::Migration[5.0]\n\tdef up\n\t\tt.integer :id\n        t.string :name\n\n        t.timestamps\n\tend\n\n\tPostCategory.reset_column_information\n\n\t%w[news blog insight guide].each do |category|\n        PostCategory.create(name: category)\n    end\n\n\tdef down\n        drop_table :post_categories\n    end\nend\n```\n\n### Reset Cached Information in Table Columns\n\n```ruby\nPostCategory.reset_column_information\n```\n\n## Routes\n\n### Set Root\n\n```ruby\nroot to: 'pages#home'\n```\n\n### Create a Route\n\nCreates an `/about` path that maps to the `controller/pages_controller.rb`\n`about` action\n\n```ruby\nget 'about', to: 'pages#about'\n```\n\nMap the `/about` route to the `PagesController` `about` action (creates a\n`about_path` helper)\n\n### Create a Route with a Named Route Helper\n\nReference the `/about` path with `about_us_path`\n\n```ruby\nget 'about', to: 'pages#about', as: 'about_us'\n```\n\nSame as the above but this time the helper is `about_us_path`\n\n### CRUD Routes\n\nThis creates the full CRUD routes; `index`, `show`, `new`, `create`, `edit`,\n`update` and `destroy`\n\n```ruby\nresources :projects\n```\n\n### CRUD Routes (Only)\n\nThis only creates the `index` and `show` action routes\n\n```ruby\nresources :projects, only: %i[index show]\n```\n\n### CRUD Routes (Except)\n\nThis creates all except the `index` and `show` action routes\n\n```ruby\nresources :projects, except: %i[index show]\n```\n\n### Non ID Resource\n\nUse this when the resource doesn't need an `ID` lookup, in this example the\nroute `/profile` would be the `show` action route\n\nThis creates all the CRUD routes, minus the `index` action route\n\n```ruby\nresource :profile\n```\n\n### Prefix URL and Controller\n\nThis will create routes like `admin/projects` which map to the controller\n`controller/admin/projects_controller.rb` and the views would be located at\n`views/admin/projects`\n\n```ruby\nnamespace :admin do\n\tresources :projects\nend\n```\n\n### Prefix URL without Changing Controller\n\nThis will create routes like `admin/projects` but the controller would be still\nbe `controller/projects_controller.rb` and the views will be located at\n`views/projects`\n\n```ruby\nscope :admin do\n\tresources :projects\nend\n```\n\n### Create Route for Object\n\nThis will create the route `projects/search`\n\n```ruby\nresources :projects do\n\tcollection do\n\t\tget \"search\"\n\tend\nend\n```\n\n### Create Route for Individual Records\n\nThis will create the route `projects/:id/complete`\n\n```ruby\nresources :projects do\n\tmember do\n\t\tput \"complete\"\n\tend\nend\n```\n\n### Add 301 Redirect\n\n```ruby\nget 'about', to: redirect('about-us')\n```\n\n[301 Moved Permanently - HTTP | MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/301)\n\n### Add 308 Redirect\n\n```ruby\nget 'about', to: redirect('about-us')\n```\n\n[308 Permanent Redirect - HTTP | MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/308)\n\n## Controllers\n\n### Run Code Before Action\n\n```ruby\nbefore_action :authenticate_user\n```\n\n### Run Code Before Action on Specific Actions\n\n```ruby\nbefore_action :authenticate_user, only: %i[create update destroy]\n```\n\n### Redirect Back with Fallback Location\n\n```ruby\nredirect_back(fallback_location: root_path)\n```\n\n## Models\n\n### Validate Presence of Attribute\n\n```ruby\nvalidates :title, **presence**: true\n```\n\n### Validate Formatting of Email\n\n```ruby\nvalidates :email, **format**: URI::MailTo::EMAIL_REGEXP\n```\n\n### Validate Attribute Value is Unique\n\n```ruby\nvalidates :title, **uniqueness**: true\n```\n\n### Validate Attribute Length is Within a Range\n\n```ruby\nvalidates :title, length: { minimum: 60, maximum: 120 }\n```\n\n### Set a CONST Variable\n\nThis can then be referenced as `Model::COUNTRIES` where `Model` is the class\nname\n\n```ruby\nCOUNTRIES = %w[England France Germany\n```\n\n### Create a Scope\n\nThis allows you to call `Project.live`\n\nYou can also use methods, but scopes are recommend when they can be used\n\n```ruby\nscope :live, -> { where(draft: false) }\n```\n\n### Set Default Scope (NOT Recommended)\n\n```ruby\ndefault_scope { order(created_at :desc) }\n```\n\n### Callback Method on Action\n\nThis runs the `set_publish_date` method before the record is created\n\n```ruby\nbefore_create :set_publish_date\n\nprivate\n\ndef set_publish_date\n\tself.publish_date = Date.today\nend\n```\n\nThere are a lot of different call back methods, you can see the full list here:\n\n[Active Record Callbacks - Ruby on Rails Guides](https://guides.rubyonrails.org/active_record_callbacks.html)\n\n_Be careful when when using `update` in a callback as it can cause an infinite\nloop, to avoid this use `update_columns`_\n\n### Query TRUE/FALSE on Boolean Column\n\nAttributes that are stored as a `boolean` can be queried if `TRUE` or `FALSE` by\nappending \"?\"\n\n```ruby\n@project.live?\n\n@user.admin?\n\n@product.published?\n```\n\n### Setup Nested Attributes\n\n```ruby\nhas_many :tags\n\naccepts_nested_attributes_for :tags\n```\n\n### Prevent Record Creation if ALL Nested Attributes are Blank\n\n```ruby\nhas_many :tags\n\naccepts_nested_attributes_for :tags, reject_if: :all_blank\n```\n\n### Allow Records from Nested Attributes to be Destroy\n\n```ruby\nhas_many :tags\n\naccepts_nested_attributes_for :tags, allow_destroy: true\n```\n\n### Delegate Attributes to Model in a Relationship (Law of Demeter)\n\nThe \"Law of Demeter\" is the process of chaining method calls across objects\n\n**The Problem**\n\n```ruby\npost.user.name\npost.user.email\n```\n\n**Fix #1 - Model Methods**\n\nThis works, but you could cause the model from growing out of control\n\n```ruby\n# models/post.rb\n\ndef user_name\n\tuser.username\nend\n\ndef user_email\n\tuser.email\nend\n```\n\n**Fix #2 - Delegate**\n\nIt's a nice idea to pass `allow_nil: true` so `nil` is returned if the data is\nnot available\n\n```ruby\n# models/user.rb\n\ndelegate :name, :email, to: :post, allow_nil: true\n```\n\nYou can then do:\n\n```ruby\npost.user_name\npost.user_email\n```\n\n### Deleting Records without Callbacks (Fast but Risky)\n\nThis is the fastest way to delete records, but it skips callbacks\n\n```ruby\nPost.first.delete\nPost.delete_all\n```\n\n### Deleting Records with Callbacks (Slow but Safe)\n\nThis is the slower way to delete records, but it doesn't skip callbacks and\nisn't that slow\n\n```ruby\nPost.first.destroy\nPost.destroy_all\n```\n\n## ActiveRecord\n\n### Return All Records of Object\n\n```ruby\nProject.all\n```\n\n### Find Record by ID\n\n```ruby\nProject.find(10)\n```\n\n### Find Record by ID (Won't Crash if NIL)\n\n```ruby\nProject.find_by(id: 10)\n```\n\n### Find Record by ID (ID from Params)\n\n```ruby\nProject.find(params[:id])\n```\n\n### Find Records by Attribute Value\n\n```ruby\nProject.find_by(title: 'Hello')\n```\n\n### Return Records Matching the Query\n\nThis accepts multiple column/value combinations\n\n```ruby\nProject.where(draft: false)\n```\n\n### Return Records NOT Matching the Query\n\nThis accepts multiple column/value combinations\n\n```ruby\nProject.where.not(draft: false)\n```\n\n### Return Number of Records in Database Table\n\n```ruby\nProject.count\n```\n\n### Find the First, Second, Third, Fourth, Fifth, Forty Second and Last Record\n\n```ruby\nProject.first\nProject.second\nProject.third\nProject.fourth\nProject.fifth\nProject.forty_two\n...\nProject.last\n```\n\n[\"Accessing the Reddit\" with Ruby on Rails](https://www.reddit.com/r/ruby/comments/823os/rails_core_has_a_method_for_accessing_the_reddit/)\n\n### Exclude Current Record from Query\n\n```ruby\nProject.where(live: true).without(self)\n```\n\n## ActiveStorage\n\n### Add File Attachment to Model\n\n```ruby\nhas_one_attached :image\n```\n\n### Check if File Attachment is Present\n\n```ruby\n@post.image.attached?\n```\n\n### Delete a File Attachment from Active Storage\n\n```ruby\n@post.image.purge\n```\n\n## ActionText\n\n### Add ActionText to Model\n\n```ruby\nhas_rich_text :body\n```\n\n### Convert ActionText Content to Plain Text\n\nThis is useful for truncating to create an excerpt\n\n```ruby\nbody.to_plain_text\n```\n\n### Expose ActionText Content on Model\n\nThis will allow you to query the content in SQL, useful for searching\n\n```ruby\nhas_one :action_text_rich_text, class_name: 'ActionText::RichText', as: :record\n\ndef self.search(query)\n\tjoins(:action_text_rich_text)\n\t\t.where('action_text_rich_texts.body LIKE :query', query: \"%#{query}%\")\nend\n```\n\nThis will search the database for records where `body` is similar to the value\nof `query`\n\n## Views\n\n### Render Data\n\n```erb\n<%= @project.title %>\n```\n\n### Render HTML Data\n\n```erb\n<%== @project.title %>\n```\n\n### Render Data\n\n```erb\n<%= @project.title %>\n```\n\n### Set Variable/Prop\n\n```erb\n<% background_color = \"#000\" %>\n```\n\n### Assign Variable/Prop\n\n```erb\n<% bg_color = local_assigns.fetch(:background_color)\n```\n\n### Assign Variable/Prop with Default Value\n\n```erb\n<% bg_color = local_assigns.fetch(:background_color, \"#000\")\n```\n\n### Render Page Content\n\n```erb\n<%= yield %>\n```\n\n### Render Content from Views into Layout\n\nAdd a `<%= yield(...) %>` helper layout file:\n`views/layouts/application.html.erb`\n\n```erb\n<%= yield(:head) %>\n```\n\nPass content into a `<%= content_for(...) %>` with matching name to the helper\n`yield`\n\n```erb\n<% content_for(:head) do %>\n    <meta name=\"turbolinks-visit-control\" content=\"reload\" />\n<% end %>\n```\n\n### Link to Page\n\n`<a href=\"/about\">About</a>`\n\n```erb\n<%= link_to(\"About\", about_path) %>\n```\n\n### Link to Page with HTML Attributes\n\n`<a href=\"/about\" class=\"button\">About</a>`\n\n```erb\n<%= link_to(\"About\", about_path, class: \"button\") %>\n```\n\nSame as the above but with HTML attributes included\n\n### Link to Record\n\n`<a href=\"/projects/10\">Project title</a>`\n\n```erb\n<%= link_to(@project.title, project_path(@project)) %>\n```\n\n### Link to Record (Short)\n\n`<a href=\"/projects/10\">Project title</a>`\n\n```erb\n<%= link_to(@project.title, @project) %>\n```\n\n### Delete Record (Link)\n\n```erb\n<%= link_to(\"Delete\", @project, method: :delete) %>\n```\n\n### Delete Record (Form - Recommended)\n\n```erb\n<%= button_to(\"Delete\", @project, method: :delete) %>\n```\n\n### Back Link\n\n```erb\n<%= link_to(\"Back\", :back) %>\n```\n\n### Create Object Link with Array (Admin)\n\n`<a href=\"admin/projects/\">Projects</a>`\n\n```erb\n<%= link_to(\"Projects\", [:admin, :projects]) %>\n```\n\nThis is the equivalent of:\n\n```erb\n<%= link_to(\"Project\", admin_projects_path) %>\n```\n\n### Create Record Show Link with Array (Admin)\n\n`<a href=\"admin/projects/10\">Project</a>`\n\n```erb\n<%= link_to(\"Project\", [:admin, @project]) %>\n```\n\nThis is the equivalent of:\n\n```erb\n<%= link_to(\"Project\", admin_project_path(project)) %>\n```\n\n### Create Record Edit Link with Array (Edit/Admin)\n\n`<a href=\"admin/projects/10/edit\">Edit</a>`\n\n```erb\n<%= link_to(\"Edit\", [:edit, :admin, @project]) %>\n```\n\nThis is the equivalent of:\n\n```erb\n<%= link_to(\"Edit\", edit_admin_project_path(project)) %>\n```\n\n### Create Email Link\n\n`<a href=\"mailto:john@doe.com\">john@doe.com</a>`\n\n```erb\n<%= mail_to(\"john@doe.com\") %>\n```\n\n### Create Email Link with Link Text\n\n`<a href=\"mailto:john@doe.com\">Email me</a>`\n\n```erb\n<%= mail_to(\"john@doe.com\", \"Email me\") %>\n```\n\n### Render Partial\n\n```erb\n<%= render \"shared/header\" %>\n```\n\n### Render Partial with Variables/Props\n\n```erb\n<%= render(\"shared/header, title: \"Hello World!\") %>\n```\n\n### Loop Through Object\n\n```erb\n<% @projects.each do |project| %>\n    <%= project.title %>\n<% end %>\n```\n\n### Render Collection\n\n```erb\n<%= render(@projects) %>\n```\n\nThis is the equivalent of:\n\n```erb\n<% @projects.each do |project| %>\n    <%= render(\"project\", project: project)\n<% end %>\n```\n\n### Conditional Render (IF)\n\n```erb\n<% if @project.draft? %>\n    <span>Draft</span>\n<% end %>\n```\n\n### Conditional Render (Inline IF)\n\n```erb\n<%= render(\"download\") if @project.download? %>\n```\n\n### Conditional Render (IF/ELSE)\n\n```erb\n<% if @project.draft? %>\n    <span>Draft</span>\n<% else %>\n    <span>Live</span>\n<% end %>\n```\n\n### Conditional Render (IF/ELSIF/ELSE)\n\n```erb\n<% if @project.draft? %>\n    <span>Draft</span>\n<% elsif @project.scheduled? %>\n    <span>Scheduled</span>\n<% else %>\n    <span>Live</span>\n<% end %>\n```\n\nConditional rendering based on the value of `@project.draft?` and\n`@project.scheduled?`\n\n### Alternate CSS Classes in Loop\n\n```erb\n<% @projects.each do |project| %>\n\t<div class=\"<%= cycle(\"odd-class\", \"even-class\") -%>\">\n\t\t<%= project.title %>\n\t</div>\n<% end %>\n```\n\n### Pluralize Word\n\nThis will render \"1 project\" or \"2 projects\"\n\n```erb\n<%= pluralize(@projects.count, 'project') %>\n```\n\nChange \"project\" to \"projects\" if `@projects.count > 1`\n\n### Pluralize Word with Specific Plural Word\n\nThis will render \"1 person\" or \"2 users\"\n\n```erb\n<%= pluralize(@users.count, 'person', plural: 'users') %>\n```\n\n### Truncate Text\n\n```erb\n<%= truncate(\"...\")\n```\n\n### Truncate Text at Specific Length\n\n```erb\n<%= truncate(\"...\", length: 50)\n```\n\n### Truncate HTML\n\nThis will render the HTML tags as a string\n\n```erb\n<%= truncate(\"<div>...</div>\", escape: false)\n```\n\n### Created HTML ID from Record\n\nThis will create `project_10`\n\n```ruby\ndom_id(@project)\n```\n\n### Created HTML ID from Record with Prefix\n\nThis will create `edit_project_10`\n\n```ruby\ndom_id(@project, :edit)\n```\n\n## Flash Messages\n\n### Add More Flash Types\n\n`controllers/application_controller.rb`\n\n```ruby\nadd_flash_types :error, :success\n```\n\n### Render Flash Message\n\n```erb\n<div class=\"alert alert-notice\" role=\"alert\">\n    <%= flash[:notice] %>\n</div>\n\n<div class=\"alert alert-alert\" role=\"alert\">\n    <%= flash[:alert] %>\n</div>\n```\n\n### Render Flash Messages with Dynamic Class\n\n```erb\n<% flash.each do |type, message| %>\n    <div class=\"alert alert-<%= type %>\" role=\"alert\"> <%= message %> </div>\n<% end %>\n```\n\n## Caching\n\n### Fragment Caching\n\n```erb\n<%= @projects.each do |project| %>\n    <% cache(project) %>\n        ...\n    <% end %>\n<% end %>\n```\n\n### Collection Caching\n\n```erb\n<%= render(partial: \"project\", collection: @projects, cached: true) %>\n```\n\n[Fragment and Collection Caching in Ruby on Rails](https://www.learnrubyonrails.com/blogs/rails-fragment-collection-caching/)\n\n## Forms\n\n### Render Form Partial\n\n`views/projects/_form.html.erb`\n\nYou should use this on the `new` and `edit` views to keep them DRY\n\n```erb\n<%= render(\"form\", project: @project) %>\n```\n\n### Form with Model\n\n```erb\n<%= form_with(model: project) do |form| %>\n    <%= form.label(:title) %>\n    <%= form.text_field(:title) %>\n    <%= form.submit %>\n<% end %>\n```\n\n### Non-Remote Form\n\nThis will stop the form submitting with JavaScript\n\n```erb\n<%= form_with(..., local: true) do |form| %>\n    ...\n<% end %>\n```\n\n[Working with JavaScript in Rails - Ruby on Rails Guides](https://guides.rubyonrails.org/working_with_javascript_in_rails.html#remote-elements)\n\n### Search Form\n\n```erb\n<%= form_with(url: search_path, method: :get, local: true) do |form| %>\n    <%= form.label(:q, \"Search\") %>\n    <%= form.search_field(:q, placeholder: \"Search...\") %>\n    <%= form.submit(\"Search\") %>\n<% end %>\n```\n\n### Namespace Form URL\n\nThis will create the URL `admin/projects`\n\n```erb\n<%= form_with(model: [:admin, project]) do |form| %>\n    ...\n<% end %>\n```\n\n### Form Select\n\nData supplied from a `CONST` variable on the `User` model\n\n```erb\n<%= form.select(:country, User::COUNTRIES) %>\n```\n\n### Form Select with Prompt Option\n\n```erb\n<%= form.select(:country, User::COUNTRIES, inlude_blank: \"Select country\") %>\n```\n\n### Form Select with HTML Attributes\n\n```erb\n<%= form.select(:country, User::COUNTRIES, {}, { class: \"form-control\" }) %>\n```\n\n### Created a Nested Form\n\n```erb\n<%= form.fields_for(:projects) do |project_fields| %>\n    <%= render \"project/form\", form: project_fields %>\n<% end %>\n```\n\n### Remove Generated ID from Nested Form\n\n```erb\n<%= form.fields_for(:projects, include_id: false) do |project_fields| %>\n    <%= render \"project/form\", form: project_fields %>\n<% end %>\n```\n\n### Showing Form Errors in the View\n\nBase HTML to use for form errors:\n\n```erb\n<div role=\"alert\">\n  <h2> There's <%= pluralize(errors.count, 'error') %> to fix </h2>\n\n  <ul>\n    <% errors.full_messages.each do |error| %>\n        <li><%= error %></li>\n    <% end %>\n  </ul>\n</div>\n```\n\nThe error message here will render like:\n\n```shell\nName can't be blank\nEmail is invalid\n```\n\nRender this with:\n\n```erb\n<%= render(\"components/form/errors\", errors: MODEL.errors) %>\n```\n\n## Mailer\n\n### Email Address with Name\n\nThis will create the following string `John Doe <johndoe@email.com>`\n\nIf now name is passed it will return the email address only\n\n```ruby\nActionMailer::Base.email_address_with_name(@user.email, @user.name)\n```\n\n## Cookies & Sessions\n\n### Create Session Cookie\n\nSession cookies will be removed once the session is over (page closes)\n\n```ruby\nsession[:user_id] = current_user.id\n```\n\n### Delete Session Cookie\n\n```ruby\nsession.delete(:user_id)\n```\n\n### Create Cookie\n\n```ruby\ncookies[:user_id] = current_user.id\n```\n\n### Delete Cookie\n\n```ruby\ncookies.delete(:user_id)\n```\n\n### Signed Cookie\n\n```ruby\ncookies.signed[:user_id] = current_user.id\n```\n\n### Encrypted Cookie\n\n```ruby\ncookies.encrypted[:user_id] = current_user.id\n```\n\n### Set Cookie Expiration Date\n\n```ruby\ncookies[:seen_newsletter_popup] = {\n    value: \"true\",\n    expires: 10.days\n}\n```\n\n### Permanent Cookie\n\nThis cookie will last 20 years\n\n```ruby\ncookies.permanent[:seen_newsletter_popup] = \"true\"\n```\n\n[Demystifying Cookie Security in Ruby on Rails 6](https://dev.to/ayushn21/demystifying-cookie-security-in-rails-6-1j2f)\n\n## Strings\n\n### Return Length of String\n\n```ruby\n\"Hello World\".size # 11\n\n\"Hello World\".length # 11\n```\n\n### Check if String Includes Text\n\n```ruby\n\"Hello World\".includes?(\"Hello\") # true\n\n\"Hello World\".includes?(\"Goodbye\") # true\n```\n\n### Replace Part of a String\n\n```ruby\n\"Hello World\".gsub(\"Hello\", \"Goodbye\") # Goodbye World\n```\n\n### Split String into Array\n\n```ruby\n\"Hello World\".split # [\"Hello\", \"World\"]\n\n\"Simon, Jay, William\".split(\",\") # [\"Simon\", \" Jay\", \" William\"]\n```\n\n### String Interpolation\n\n```ruby\nname = \"Simon\"\n\n\"Hello #{name}\"\n```\n\n## Arrays\n\n### Return Length of Array\n\n```ruby\n[\"Hello\", \"World\"].size # 2\n\n[\"Hello\", \"World\"].length # 2\n\n[\"Hello\", \"World\"].count # 2\n```\n\n### Push to Array\n\n```ruby\n[\"Hello\", \"World\"] << \"Goodbye\" # [\"Hello\", \"World\", \"Goodbye\"]\n\n[\"Hello\", \"World\"].push(\"Goodbye\") # [\"Hello\", \"World\", \"Goodbye\"]\n```\n\n### Combine Arrays\n\n```ruby\n[\"Hi\", \"Hello\"].concat([\"Bye\", \"See Ya\"]) # [\"Hi\", \"Hello\", \"Bye\", \"See Ya\"]\n\n[\"Hi\", \"Hello\"] + [\"Bye\", \"See Ya\"] # [\"Hi\", \"Hello\", \"Bye\", \"See Ya\"]\n```\n\n### Remove from Array\n\n```ruby\n[\"Hello\", \"World\"].delete(\"Hello\") # World\n\n[\"Hello\", \"World\"].delete_at(1) # World\n```\n\n### Remove All from Array\n\n```ruby\n[\"Hello\", \"World\"].clear # []\n```\n\n### Check if Array Includes Text\n\n```ruby\n[\"Hello\", \"World\"].includes?(\"Hello\") # true\n\n[\"Hello\", \"World\"].includes?(\"Goodbye\") # true\n```\n\n### Reverse Array\n\n```ruby\n[\"Hello\", \"World\"].reverse # [\"World\", \"Hello\"]\n```\n\n### Shuffle the Array\n\nReturn a random order of the array\n\n```ruby\n[\"Simon\", \"Jay\", \"William\"].shuffle\n```\n\n### Sample the Array\n\nReturn a random item from the array\n\n```ruby\n[\"Simon\", \"Jay\", \"William\"].sample\n```\n\n### Remove Duplicate Items from Array\n\n```ruby\n[\"A\", \"A\", \"B\", \"C\", \"C\"].uniq # [\"A\", \"B\", \"C\"]\n```\n\n### Flatten Array\n\n```ruby\n[[\"Hi\", \"Hello\"], [\"Bye\", \"See Ya\"]].flatten # [\"Hi\", \"Hello\", \"Bye\", \"See Ya\"]\n```\n\n### Join Array Items (String)\n\n```ruby\n[\"Simon\", \"Jay\", \"William\"].join(\", \") # Simon, Jay, William\n```\n\n### Array Items to Sentence (String)\n\n```ruby\n[\"Simon\", \"Jay\", \"William\"].to_sentence # Simon, Jay, and William\n```\n\n## Other\n\n### Symbol to Proc\n\n**Capitalize Each Item in Array**\n\n```ruby\n[\"hello\", \"world\"].map(&:capitalize) # [\"Hello\", \"World\"]\n```\n\n### Find Current Controller Name\n\n```ruby\ncontroller.controller_name\n```\n\n### Find Current Controller Action Name\n\n```ruby\ncontroller.action_name\n```\n\n### Remove Empty Values from Array\n\nReturns a new array with empty values removed\n\n```ruby\n[\"Hello\", \"\", \"World\", nil].reject(&:blank?)\n\n# [\"Hello\", \"World\"]\n```\n\n### Create Array of Strings\n\nYou can use `%W` if you need interpolation\n\n```ruby\n# Old\n[\"Rails\", \"Tailwind\", \"HTML\", \"Stimulus\"]\n\n# New\n%w[Rails Tailwind HTML Stimulus]\n```\n\n_You can only use `%w` and `%W` on single words as the array splits on\nwhitespace_\n\n### Create Array of Symbols\n\nYou can use `%I` if you need interpolation\n\n```ruby\n# Old\n[:new, :edit, :create, :update, :destroy]\n\n# New\n%i[new edit create update destroy]\n```\n\n_You can only use `%i` and `%I` on single words as the array splits on\nwhitespace_\n\n### Calculate Sum of Values\n\n```ruby\n[10, 10, 20].sum\n```\n\n### Do Block\n\n```ruby\nPost.all.each do |post|\n  post.title\nend\n```\n\n### Single Line Do Blocks\n\n```ruby\nPost.all.each{ |post| post.save }\n```\n\n### Create a Method\n\n```ruby\ndef do_something\nend\n```\n\n### Create Method with Arguments\n\n```ruby\ndef do_something(name)\nend\n```\n\n### Create Method with Default Argument\n\n```ruby\ndef do_something(name = \"User\")\nend\n```\n\n### Create a Class\n\n```ruby\nclass Person\nend\n```\n\n### Create a Class that Accepts Arguments\n\n```ruby\nclass Person\n\tattr_reader :name\n\n\tdef initialize(name:)\n\t\t@name = name\n\tend\nend\n\nperson = Person.new(name: \"Simon\")\n```\n\n### If/Else Statement\n\n```ruby\nnumber = 20\n\nif number > 10\n\t\"Greater than 10\"\nelse\n\t\"Less than 10\"\nend\n```\n\n### If/Elsif/Else Statement\n\n```ruby\nnumber = 20\n\nif number > 15\n\t\"Greater than 15\"\nelsif number > 10\n\t\"Greater than 10\"\nelse\n\t\"Less than 10\"\nend\n```\n\n### Case/Switch Statement\n\n```ruby\nnumber = 20\n\ncase number\nwhen > 15\n\t\"Greater than 15\"\nwhen > 10\n\t\"Greater than 10\"\nelse\n\t\"Less than 10\"\nend\n```\n\n## PG Search (Gem)\n\n`bundle add pg_search`\n\n### Search Against Single Attribute on Model\n\n```ruby\ninclude PgSearch::Model\n\npg_search_scope :search, against: :title\n```\n\n### Search Against Multiple Attributes on Model\n\n```ruby\ninclude PgSearch::Model\n\npg_search_scope :search, against: %i[title subtitle body]\n```\n\n### Search Against Action Text Data\n\nReplace `body` with the name of your column using Action Text\n\n```ruby\ninclude PgSearch::Model\n\npg_search_scope :search, associated_against: { rich_text_body: :body }\n```\n\n## Web Console (Gem)\n\nInstalled by default\n\n### View Interactive Rails Console in the Browser\n\n```ruby\nclass ProjectsController < ApplicationController\n\tdef index\n\t\t@projects = Project.all\n\n\t\tconsole\n\tend\nend\n```\n\nOr you can use it in ERB like so.\n\n```erb\n<h1>All Projects</h1>\n\n<%= console %>\n```\n\n## Friendly ID (Gem)\n\n`bundle add friendly_id`\n\n### Use Single Attribute\n\n```ruby\nclass Project < ApplicationRecord\n\textend FriendlyId\n\tfriendly_id :title, use: [:slugged, :finders]\nend\n```\n\n### Fallback to Multiple Attributes\n\nIf `title` is not unique fallback to `title-company`\n\n```ruby\nclass Project < ApplicationRecord\n\textend FriendlyId\n\tfriendly_id :slug_candidates, use: [:slugged, :finders]\n\n\tdef slug_candidates\n\t\t[:title, [:title, :company]]\n\tend\nend\n```\n\n### Better Find\n\nThis removes the need to use `friendly.find`\n\n```ruby\nuse: [:slugged, :finders]\n```\n\n## Stripe (Gem)\n\n`bundle add stripe`\n\n### Setup Stripe\n\n`config/initializers/stripe.rb`\n\n```ruby\nRails.configuration.stripe = {\n  publishable_key: ENV[\"STRIPE_PUBLISHABLE_KEY\"],\n  secret_key: ENV[\"STRIPE_SECRET_KEY\"],\n}\n\nStripe.api_key = Rails.configuration.stripe[:secret_key]\n```\n\n`views/layouts/application.html.erb`\n\n```erb\n<%= javascript_include_tag \"https://js.stripe.com/v3/\" %>\n```\n\n### Stripe Checkout\n\n`config/routes.rb`\n\n```ruby\nscope \"checkout\" do\n\tpost \"create\", to: \"checkout#create\", as: :checkout_create\n\tget \"cancel\", to: \"checkout#cancel\", as: :checkout_cancel\n\tget \"success\", to: \"checkout#success\", as: :checkout_success\nend\n```\n\n`controllers/checkouts_controller.rb`\n\n```ruby\nclass CheckoutController < ApplicationController\n  def create\n    @session = Stripe::Checkout::Session.create(\n      payment_method_types: %w[card],\n      line_items: [\n        {\n          name: params[:name],\n          description: params[:description],\n          amount: params[:amount],\n          currency: \"gbp\",\n          quantity: params[:quantity],\n        },\n      ],\n      success_url: checkout_success_url,\n      cancel_url: checkout_cancel_url,\n    )\n\n    respond_to do |format|\n      format.js\n    end\n  end\n\n  def success; end\n\n  def cancel; end\nend\n```\n\n`views/checkount/create.js.erb`\n\n```ruby\nconst stripe = Stripe(\"<%= ENV['STRIPE_PUBLISHABLE_KEY'] %>\")\n\nstripe.redirectToCheckout({\n  sessionId: \"<%= @session.id %>\"\n})\n```\n\n`views/products/product.html.erb`\n\n```erb\n<%= form_with(url: checkout_create_path, local: false) do |form| %>\n    <%= form.hidden_field :name, value: @product.title %>\n    <%= form.hidden_field :description, value: @product.description %>\n    <%= form.hidden_field :amount, value: @product.price * 100 %> <%= form.number_field :quantity, value: 1 %>\n    <%= form.submit %>\n<% end %>\n```\n\n## Code Snippets\n\n### Rails Based Body Class\n\nSet a unique class to the `<body>` tag, created from the current controller and\naction names\n\n```ruby\ndef page_class\n  \"#{controller.controller_name}-#{controller.action_name}\"\nend\n```\n\nAnd then in your layout file you can do this.\n\n```erb\n<body class=\"<%= page_class %>\">\n```\n\n[Using the Controller to Create Page Class Names in Ruby on Rails](https://www.learnrubyonrails.com/blogs/rails-controller-class-names-page/)\n\n### Better Email Link\n\nRemoves the need to pass the email twice when using HTML attributes\n\n```ruby\ndef email_to(email, **object)\n  link_to(email, \"mailto:#{email}\", **object)\nend\n```\n\n### Better Phone Link\n\nRemoves the need to pass the email twice when using HTML attributes\n\n```ruby\ndef tel_to(number, **object)\n  link_to(number, \"tel:#{number}\", **object)\nend\n```\n\nAs of Rails `v6.1.3.1` there is a `phone_to` helper\n",
            "url": "https://www.markmead.dev/blog/ruby-rails-ultimate-cheatsheet",
            "title": "The Ultimate Ruby on Rails Cheatsheet",
            "summary": "Digestable Ruby on Rails information to help you with development.",
            "date_modified": "2021-10-19T23:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "laravel-livewire-localization",
            "content_html": "\nRecently, I have been working on a Laravel website using the TALL stack that\nrequires different locales. These locales are specific to different URLs, such\nas:\n\n- `en-gb` (UK/International)\n- `en-au` (Australia)\n- `en-us` (USA)\n\nThe project uses a config file `sites.php` to manage data for each site that\ncan't be managed from translation files. This data can be accessed through a\ncustom facade:\n\n```php\nLocaleSettings::get('default_currency');\n```\n\nUnder the hood this is doing:\n\n```php\nreturn config('sites')[app()->getLocale()][$key];\n```\n\nFor each of these locales we have different currencies.\n\n| Route | Currencies         | Default |\n| ----- | ------------------ | ------- |\n| en-gb | GBP, USD, ZAR, EUR | GBP     |\n| en-au | AUD, USD           | AUD     |\n| en-us | USD, GBP           | USD     |\n\nWhen a currency or locale is changed, the cart and product components on the\npage will be refreshed to show the correct price for that currency.\n\nThis works fine when changing the currency through Livewire.\n\nHowever, when switching the locale it sets the currency to the default currency\nwhich works fine on initial load, but when Livewire does a POST request when a\ncomponent updates, for example when adding to the cart, it resets back to the\nfallback currency of GBP.\n\nThis is because the locale in the route is being changed, which is caused by\nLivewire not using localized routes when doing the POST request to the server.\n\nFor this I created a new middleware called `LocalizationLivewire` with the\nfollowing code:\n\n```php\n<?php\n\nnamespace App\\Http\\Middleware;\n\nuse Closure;\nuse Illuminate\\Http\\Request;\n\nclass LocalizationLivewire\n{\n    public function handle(Request $request, Closure $next)\n    {\n        if ($request->route()->getName() === 'livewire.message') {\n            app()->setLocale($request->request->get('fingerprint')['locale']);\n\n            return $next($request);\n        }\n\n        return $next($request);\n    }\n}\n```\n\nAnd added this above my `Localization` middleware in the `Kernel.php`.\n\nThis middleware checks if the route name is `livewire.message` which is the\nroute name for Livewire POST request when components update.\n\nIt then sets the app locale to the value of the locale in the fingerprint on the\nrequest. If you're not sure what the fingerprint is, then here's a snippet from\nCaleb Porzio's blog\n[How Livewire Works (a deep dive)](https://calebporzio.com/how-livewire-works-a-deep-dive).\n\n> This is data associated with a component that makes it unique and provides\n> essential non-changing information about it.\n\n```json\n\"fingerprint\": {\n  \"id\": \"44Njb4Yue0jBTzpzRlUf\",\n  \"name\": \"counter\",\n  \"locale\": \"en\",\n  \"path\": \"\",\n  \"method\": \"GET\"\n},\n```\n\nAnd that's basically that, it worked as expected from there out. Such an easy\nfix after hours (and I mean hours) of banging my head against the wall.\n",
            "url": "https://www.markmead.dev/blog/laravel-livewire-localization",
            "title": "How to Fix Livewire Ignoring Localization in Routes",
            "summary": "How you can fix Livewire ignoring your localized routes.",
            "date_modified": "2022-05-24T23:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "custom-gradients-with-tailwindcss-jit",
            "content_html": "\n## What is JIT?\n\nSince v3, JIT has been the default in Tailwind CSS and has bought a lot of power to the framework. One of the best additions are [arbitrary values](https://tailwindcss.com/docs/adding-custom-styles#using-arbitrary-values), these allow you to replace custom CSS with Tailwind CSS like classes.\n\n### Without Tailwind CSS JIT\n\n```html\n<div class=\"absolute p-4 floating-alert\">Hello World! 👋</div>\n```\n\nAnd for the CSS...\n\n```css\n.floating-alert {\n  bottom: 5px;\n  right: 5px;\n}\n```\n\n### With Tailwind CSS JIT\n\n```html\n<div class=\"absolute p-4 bottom-[5px] right-[5px]\">Hello World! 👋</div>\n```\n\nThe benefit here is keeping everything within the HTML, this means:\n\n- Less switching between files\n- No need to update Tailwind CSS config\n- Easily use Tailwind CSS breakpoints `top-[2px] sm:top-[3px] lg:top-[5px]`\n\n## Creating Gradients with Tailwind CSS JIT\n\nIf you are using these gradients more than once, it's worth adding them to the Tailwind CSS config.\n\nThe syntax for creating a gradient looks confusing, but it's easy to understand once you realise that spaces are replaced with underscores. Take the following example:\n\n```html\n<div class=\"bg-[linear-gradient(180deg,_#005BBB_49.9%,_#FFD500_50%)]\"></div>\n```\n\nIn CSS this would be:\n\n```css\nbackground-image: linear-gradient(180deg, #005bbb 49.9%, #ffd500 50%);\n```\n\nThe underscores after commas are personal choice, I leave them in for readability but you can remove them.\n\nHere's a [preview of the example](https://play.tailwindcss.com/0Q0oaPLA4I) created in Tailwind CSS play sandbox.\n\nLet's try something a little tougher.\n\n## Conic Gradients in Tailwind CSS with JIT\n\nFor this I've used [Hypercolor](https://hypercolor.dev) to find a `conic-gradient` for the example.\n\n![](/images/posts/conic-gradient-example.webp)\n\nHere's the code written to replicate the example:\n\n```html\n<div\n  class=\"bg-[conic-gradient(at_left_center,_#eab308,_#a855f7,_#3b82f6)]\"\n></div>\n```\n\nWhich results in the follow CSS:\n\n```css\nbackground-image: conic-gradient(at left center, #eab308, #a855f7, #3b82f6);\n```\n\n## Radial Gradients in Tailwind CSS with JIT\n\nOnce again I'm using [Hypercolor](https://hypercolor.dev) to find a `radial-gradient` for the example.\n\n![](/images/posts/radial-gradient-example.webp)\n\nHere's the code written to replicate the example:\n\n```html\n<div\n  class=\"bg-[radial-gradient(at_center_bottom,_#fde68a,_#7c3aed,_#0c4a6e)]\"\n></div>\n```\n\nWhich results in the follow CSS:\n\n```css\nbackground-image: radial-gradient(at center bottom, #fde68a, #7c3aed, #0c4a6e);\n```\n\nAnd that's all it takes to add custom gradients, even styles that don't exist in Tailwind CSS to Tailwind CSS with JIT. Checkout [Hypercolor](https://hypercolor.dev) for more gradients including; mesh gradients, grainy gradients and a gradient generator.\n",
            "url": "https://www.markmead.dev/blog/custom-gradients-with-tailwindcss-jit",
            "title": "How to Create Custom Gradients in Tailwind CSS with JIT",
            "date_modified": "2022-03-07T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "hacktoberfest-2022",
            "content_html": "\nI'm pleased to announce that HyperUI will be participating in [Hacktoberfest 2022](https://hacktoberfest.com).\n\nBefore creating PRs, it's worth reading through [How to Contribute to HyperUI](/blog/how-to-contribute) as well as the [Hacktoberfest Participation Guide](https://hacktoberfest.com/participation/).\n\nAll PRs will need to be up-to the standard of previous PRs on the HyperUI project, it would be worth spending a few minutes reviewing what other contributors have done.\n\nPlease do not split out related changes onto different PRs to maximise your Hacktoberfest contributions, your PRs will be marked as `spam` pushing you closer to being banned from Hacktoberfest.\n\nEnjoy and I look forward to approving your PRs! 🎃\n\nHere's a list of other projects I work on that are taking part:\n\n- [HyperJS](https://github.com/markmead/hyperjs)\n- [Hypercolor](https://github.com/jordihales/hypercolor)\n",
            "url": "https://www.markmead.dev/blog/hacktoberfest-2022",
            "title": "HyperUI x Hacktoberfest 2022",
            "date_modified": "2022-09-20T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "highlight-hover-effect-with-tailwindcss",
            "content_html": "\nOn the web you might come across a hover effect where the element you are hovering has full opacity and the sibling elements have a lower opacity. It could look something like this.\n\n![](/images/posts/highlight-hover-example.webp)\n\nAs you can see the second from the left item is at full opacity, while the others are faded.\n\n## How?... in Tailwind CSS\n\nThanks to the new hideous syntax where we can write stuff like `[&:hover>li]` we can get this working quite easily, without any custom CSS 🎉\n\nSo what do we need?\n\n1. Parent element that on hover lowers the opacity of child elements\n2. Child elements that on hover override their opacity\n\nHere's a simple version of that.\n\n```html\n<ul class=\"[&:hover>li]:opacity-50]\">\n  <li class=\"hover:!opacity-100\">...</li>\n  <li class=\"hover:!opacity-100\">...</li>\n  <li class=\"hover:!opacity-100\">...</li>\n  <li class=\"hover:!opacity-100\">...</li>\n</li>\n```\n\nThere's not much happening here but let's break it down.\n\n**`[&:hover>li]:opacity-50]`**\n\nWhen the `ul` is on hover target the `li` elements and lower their opacity to `0.5`.\n\n**`hover:!opacity-100`**\n\nWhen the `li` element is on hover, force the opacity back to `1`. We force it with the `!` modifier which applies `!important`.\n\nThat's the base for any hover effect like this with Tailwind CSS, now we can take that logic and apply it to a built out design.\n\n[Highlight Hover Example](https://play.tailwindcss.com/rc93nyfqOu?layout=preview)\n\n---\n\nOne thing you'll notice, when hovering in the gaps between the `li` elements that one of them will be on hover, this is to ensure an element is highlighted when the cursor is within the `ul`.\n\nYou can get around this with JavaScript using something like the [Negative Hover](https://github.com/markmead/negative-hover) package that I wrote.\n",
            "url": "https://www.markmead.dev/blog/highlight-hover-effect-with-tailwindcss",
            "title": "Highlight Hover Effect with Tailwind CSS",
            "date_modified": "2022-09-30T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "how-to-contribute",
            "content_html": "\nFor some, the idea of contributing to an open source project can be very daunting but please don't let that put you off. Let's walk through how you can contribute to HyperUI and get some open source work on your CV/GitHub.\n\n## Spotted a Bug?\n\nIf you notice something that looks a little off:\n\n- Spelling\n- Accessibility\n- SEO\n\nPlus plenty more, then please do [create an issue](https://github.com/markmead/hyperui/issues/new/choose).\n\nOnce an issue has been created I can start working on a fix. However, if you'd like to work on the fix then let me know.\n\n## Want to Add Something?\n\nIf you have something that you want to add to HyperUI then that's awesome, but before you dive too deep into the development, I'd recommend that you [create an issue](https://github.com/markmead/hyperui/issues/new/choose) to outline what it is that you are adding.\n\nIf you plan to add a new component then please include some examples of what the component will look like.\n\n### Pull Request Feedback\n\nHere's the scary part 👻\n\nAll pull requests need to be reviewed before being merged into HyperU, which does mean that on occasion there will be feedback. Please do not be disheartened by feedback, we're all developing each other's skillset and trying to make HyperUI (and other open source projects) better.\n\n### Getting HyperUI Running Locally\n\nHyperUI is a Next JS + Typescript project and can be set up quickly with the following commands.\n\n```shell\ngit clone git@github.com:markmead/hyperui.git\nyarn\nyarn dev\n```\n\nIf you are working on some changes that need to compile CSS, then you'll need to open a new terminal window and run the following.\n\n```shell\nyarn watch\n```\n\n### Creating a New Component\n\nFor this example, we will be adding a new footer component in the marketing category.\n\n1. Create a new file in `/public/components/marketing-footers`\n2. Add the new component to the components group in `/data/components/marketing-footers.mdx`\n\nIt should look like this.\n\n```shell\ncomponents:\n  21:\n    title: An Amazing Footer\n  22:\n    title: My Awesome New Footer ✨\n```\n\nAs you will see, component files are named incrementally, please follow this method.\n\nIf needed you can use `spacing: ...` to position the component within the preview, but note, that any classes added here will be ignored when copying or viewing the components code.\n\n#### Notes on New Components\n\n1. Components need to be written with Tailwind CSS\n2. Don't make changes to the `/public/build.css`\n3. Reference used Tailwind CSS plugins in the HTML\n\nYou can see examples of points 3 and 4 in the HTML of this [input component](https://www.hyperui.dev/components/application-ui/pagination#component-3).\n\n### Creating a New Collection\n\nIf you want to create a new collection then please [create an issue](https://github.com/markmead/hyperui/issues/new/choose) on GitHub, then we can discuss the new collection and get some ideas for what components can be added.\n\n### New Component Feedback\n\nIf you are looking to add a component to HyperUI then I will give feedback on both the design and development of the component.\n\nFor new component pull requests, I will review the work three times. If on the third review there is feedback from the first review that is still not addressed, then I will close it and ask for it to be re-opened once feedback has been addressed.\n\nIf on the third review there is new feedback then that's not an issue, it's only if you have continued to ignore feedback from the first review.\n\nI believe this to be fair.\n\n## Final Notes\n\nContributing to open source is one of the best feelings for a developer, but as mentioned, it can be very daunting. I really don't want anyone to feel that way with HyperUI, so please do get involved, and let's all push HyperUI to become a better project.\n",
            "url": "https://www.markmead.dev/blog/how-to-contribute",
            "title": "How to Contribute to HyperUI",
            "date_modified": "2022-07-26T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "how-to-write-better-containers-in-tailwindcss",
            "content_html": "\nThroughout HyperUI you will see the classes `max-w-screen-xl mx-auto px-4` used to contain content, this can be seen on the website and the components.\n\nSome of you may be wondering...\n\n> Why not use the `.container` class?\n\nGreat question.\n\nLet's look at the `.container` class [documentation](https://tailwindcss.com/docs/container) on the Tailwind CSS website.\n\nAs we can see it provides `max-width` sizes at different breakpoints, which results in the content within the container snapping to that size as the breakpoint is reached.\n\n[Container Example](https://play.tailwindcss.com/b5FKBhVHw7?layout=preview&size=1866x900)\n\nIf you shrink/expand the preview you will see the content within the container snapping.\n\n## A More Fluid Container\n\nHere's the same preview but using the classes I mentioned at the start of this blog post.\n\n[Fluid Example](https://play.tailwindcss.com/vwHBxhrJMC?layout=preview&size=1866x900)\n\nAs you can see it's more fluid, you reach the breakpoint where `max-w-screen-xl` is no longer applied and then the padding is used to contain the content. If you wanted a fully fluid container you can remove the `max-w-screen-xl` class.\n\nLet's compare the two.\n\n[Container vs Fluid Example](https://play.tailwindcss.com/A7HdMDPg0O?layout=preview&size=1866x900)\n\nAn argument for the `.container` approach is that the content is wider on larger screens, but to solve that you can use `max-w-screen-2xl` instead of `max-w-screen-xl`.\n\n## Edit the Config and Write Less Code\n\nOne final note, if you are using the `.container` approach and find yourself writing `container mx-auto` a lot, then you can do the following.\n\n```js\ntheme: {\n  container: {\n    center: true,\n\n    // Optional\n    padding: {\n      DEFAULT: '1rem',\n      sm: '1.5rem',\n      lg: '2rem'\n    }\n  },\n}\n```\n\n---\n\nFun fact, I wrote a blog post in 2021 arguing the `.container` approach over using `max-w-screen-xl`, you can still read that.\n\n[How to Write Better Tailwind CSS Containers - 2021](https://v1.markmead.dev/blogs/how-to-write-better-tailwindcss-containers)\n",
            "url": "https://www.markmead.dev/blog/how-to-write-better-containers-in-tailwindcss",
            "title": "How to Write Better Containers in Tailwind CSS",
            "date_modified": "2022-09-25T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "how-to-write-better-tailwindcss",
            "content_html": "\nWriting Tailwind CSS? Here are some tips and tricks that I apply when using Tailwind CSS to make my code look and perform better.\n\nGot some tips to add to add? [Create a PR on GitHub](https://github.com/markmead/hyperui).\n\n## Delegate Classes to Parent Element\n\n### Incorrect\n\n```html\n<ul>\n  <li class=\"text-sm font-medium whitespace-nowrap\">First</li>\n  <li class=\"text-sm font-medium whitespace-nowrap\">Second</li>\n  <li class=\"text-sm font-medium whitespace-nowrap\">Third</li>\n</ul>\n```\n\n### Correct\n\n```html\n<ul class=\"text-sm font-medium\">\n  <li class=\"whitespace-nowrap\">First</li>\n  <li class=\"whitespace-nowrap\">Second</li>\n  <li class=\"whitespace-nowrap\">Third</li>\n</ul>\n```\n\n---\n\n## Remove Flex Classes on Mobile\n\n### Incorrect\n\n```html\n<div class=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n  <div>Hello</div>\n  <div>World</div>\n</div>\n```\n\n### Correct\n\n```html\n<div class=\"sm:flex sm:items-center sm:justify-between\">\n  <div>Hello</div>\n  <div>World</div>\n</div>\n```\n\n---\n\n## Evenly Space Content with Flow Root\n\n### Incorrect\n\n```html\n<ul class=\"space-y-8 divide-y\">\n  <li>First</li>\n  <li class=\"pt-8\">Second</li>\n  <li class=\"pt-8\">Third</li>\n</ul>\n```\n\n### Correct\n\n```html\n<div class=\"flow-root\">\n  <ul class=\"-my-8 divide-y\">\n    <li class=\"py-8\">First</li>\n    <li class=\"py-8\">Second</li>\n    <li class=\"py-8\">Third</li>\n  </ul>\n</div>\n```\n\n> But this is more code\n\nTrue, however...\n\n- Which one will make more sense in a few months time?\n- How would the first example work with dynamic content?\n\n---\n\n## Avoid Margin Bottom for Spacing Content\n\n### Incorrect\n\n```html\n<div>\n  <div class=\"mb-4\">Hello</div>\n  <div>World</div>\n</div>\n```\n\n### Correct\n\n```html\n<div>\n  <div>Hello</div>\n  <div class=\"mt-4\">World</div>\n</div>\n```\n\n> What is the benefit, they do the same thing?\n\nSure, but what if the content is dynamic and there's no second element? You'll end up with extra space below the first element.\n\n---\n\n## Remove Duplicate Spacing Classes with Parent Classes\n\n### Incorrect\n\n```html\n<ul>\n  <li>First</li>\n  <li class=\"mt-8\">Second</li>\n  <li class=\"mt-8\">Third</li>\n</ul>\n```\n\n### Correct\n\n```html\n<ul class=\"space-y-8\">\n  <li>First</li>\n  <li>Second</li>\n  <li>Third</li>\n</ul>\n```\n\n---\n\n## Use the Accurate Transition Class\n\n### Incorrect\n\n```html\n<button class=\"bg-red-500 transition-all hover:bg-red-600\">Click</button>\n```\n\n### Correct\n\n```html\n<button class=\"bg-red-500 transition-colors hover:bg-red-600\">Click</button>\n```\n\n> But the class name is longer?\n\nCan't argue with that, but do you need `transition-all`? Probably not.\n\n**If you want to save on class name length then use `transition` it will cover\n99% of the transition effects you need.**\n\n---\n\n## Use Color Opacity Classes\n\n### Incorrect\n\n```html\n<button class=\"relative\">\n  <span class=\"absolute inset-0 bg-red-500 opacity-50\"></span>\n  Click\n</button>\n```\n\n### Correct\n\n```html\n<button class=\"bg-red-500 bg-opacity-50\">Click</button>\n<!-- With JIT -->\n<button class=\"bg-red-500/50\">Click</button>\n```\n\n---\n\n## Split CSS Class Names onto Multiple Lines in CSS Files\n\n### Incorrect\n\n```css\n.button {\n  @apply inline-flex items-center rounded border text-sm px-5 py-3 transition hover:scale-105;\n}\n```\n\n### Correct\n\n```css\n.button {\n  @apply inline-flex items-center; // Layout\n  @apply px-5 py-3 text-sm; // Spacing/Sizing\n  @apply rounded border; // Style\n  @apply transition; // Transition\n  @apply hover:scale-105; // Interaction\n}\n```\n\n> How is this better? It's more code...\n\nCorrect, but it's easier to read and it all gets compiled down.\n\n---\n\n## Avoid Creating Components in CSS Files\n\n**Only applies if you are using a templating language that allows for\ncomponents, such as Blade, React, Liquid OR Vue.**\n\n### Incorrect\n\n```html\n<div class=\"card\">\n  <div class=\"card-title\">Title</div>\n  <div class=\"card-body\">Title</div>\n  <div class=\"card-footer\">\n    <div class=\"card-timestamp\">15/05/2025</div>\n\n    <div class=\"card-actions\">\n      <button>Edit</button>\n      <button>Delete</button>\n    </div>\n  </div>\n</div>\n```\n\nAnd for the CSS...\n\n```css\n  .card {\n    @apply p-4 rounded;\n  }\n\n  .card-title {\n    @apply text-lg;\n  }\n\n  .card-body {\n    @apply mt-1;\n  }\n\n  .card-footer {\n    @apply flex items-center justify-between;\n  }\n\n  .card-timestamp {\n    @apply text-sm;\n  }\n\n  .card-actions {\n    @apply flex gap-4;\n  }\n</style>\n```\n\n### Correct\n\n```html\n<div class=\"p-4 rounded\">\n  <div class=\"text-lg\">Title</div>\n  <div class=\"mt-1\">Title</div>\n  <div class=\"flex items-center justify-between\">\n    <div class=\"text-sm\">15/05/2025</div>\n\n    <div class=\"flex gap-4\">\n      <button>Edit</button>\n      <button>Delete</button>\n    </div>\n  </div>\n</div>\n```\n\n---\n\n## Use Max Width Classes When Restricting Width\n\n### Inccrect\n\n```html\n<div class=\"w-auto sm:w-64\">\n  <div>Hello World</div>\n</div>\n```\n\n### Correct\n\n```html\n<div class=\"max-w-sm\">\n  <div>Hello World</div>\n</div>\n```\n\n> What's the benefit?\n\nThere's a few:\n\n- They are responsive by default\n- They better describe the layout\n\n---\n\n## Group Prefixed Class Names\n\n### Incorrect\n\n```html\n<div class=\"\\mt-4 sm:mt-0 text-lg sm:text-xl lg:text-3xl\\\">Hello World</div>\n```\n\n_Excuse the `\\...\\` it's to stop Headwind from formatting._\n\n### Correct\n\n```html\n<div class=\"mt-4 text-lg sm:mt-0 sm:text-xl lg:text-3xl\">Hello World</div>\n```\n\nYou can use something like [Headwind](https://github.com/heybourn/headwind) to do this for you.\n\n---\n\n## Be Specific with Breakpoint Classes\n\n### Incorrect\n\n```html\n<div class=\"items-center justify-between sm:flex\">\n  <div>Hello</div>\n  <div>World</div>\n</div>\n```\n\n### Correct\n\n```html\n<div class=\"sm:flex sm:items-center sm:justify-between\">\n  <div>Hello</div>\n  <div>World</div>\n</div>\n```\n\n> What's the issue here?\n\nYou are loading extra CSS on mobile that isn't being used. This might not seem drastic in this example but imagine the\nwhole frontend is written like the first example... That's a lot of extra CSS being loaded on mobile.\n\n---\n\n## Use Headwind and Tailwind CSS Intellisense\n\n### Headwind\n\n[GitHub Repo](https://github.com/heybourn/headwind)\n\n- Sort Tailwind CSS class names\n- Remove duplicate class names\n- Move custom class names to end of class name list\n\n### Tailwind CSS Intellisense\n\n[GitHub Repo](https://github.com/tailwindlabs/tailwindcss-intellisense)\n\n- Autocomplete Tailwind CSS class names (includes classes added in the Tailwind CSS config)\n- Highlights errors with Tailwind CSS class names\n- Displays the CSS generated with each Tailwind CSS class\n",
            "url": "https://www.markmead.dev/blog/how-to-write-better-tailwindcss",
            "title": "Tips & Tricks for Writing Better Tailwind CSS",
            "date_modified": "2022-04-17T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "text-shadow-with-tailwindcss",
            "content_html": "\nIt's worth noting that if you don't want to update the Tailwind CSS config, then you can use JIT to write the following.\n\n```html\n<h1 class=\"[text-shadow:_0_1px_0_rgb(0_0_0_/_40%)]\">Hello</h1>\n```\n\nAnd if you still want to be able to use classes such as `shadow-red-500` you can do this.\n\n```html\n<h1 class=\"[text-shadow:_0_1px_0_var(--tw-shadow-color)]\">Hello</h1>\n```\n\n## Why No Support? 🤷‍♂️\n\nAt the moment, there is no official support for `text-shadow` classes in Tailwind CSS and in fact, in a recent tweet Adam Wathan, the creator of Tailwind CSS said this:\n\n> What CSS feature that Tailwind doesn't have baked in do you find yourself getting the most irrationally angry about? Need ideas for v3.1 😅\n\n> In before `text-shadow` — harder than it sounds, one day, I'm sorry 👀\n\n[View tweet on Twitter](https://twitter.com/adamwathan/status/1507431966412611591?s=20&t=augWHUcu8eIqNRWNCAAn9Q)\n\nThe reason for this is justified, it's not the implementation that's difficult (as you will see), it's the execution.\n\n> The hard part is choosing the default shadows to include. I've spent probably 20 hours on the problem so far and still haven't come up with a good way to approach it. What are all the problems they solve, how many sizes do we need, do they need to support colors, etc.\n\n[View tweet on Twitter](https://twitter.com/adamwathan/status/1507433677927727104?s=20&t=NTtEa-65fs_7MWFxra0Icw)\n\nWhat to do while we wait? Easy. We'll do it ourselves.\n\n## Adding Text Shadow Classes to Tailwind CSS\n\nIn your `tailwind.config.js` add the following:\n\n```js\nconst plugin = require('tailwindcss/plugin')\n\nmodule.exports = {\n  theme: {\n    extend: {\n      textShadow: {\n        sm: '0 1px 2px var(--tw-shadow-color)',\n        DEFAULT: '0 2px 4px var(--tw-shadow-color)',\n        lg: '0 8px 16px var(--tw-shadow-color)',\n      },\n    },\n  },\n  plugins: [\n    plugin(function ({ matchUtilities, theme }) {\n      matchUtilities(\n        {\n          'text-shadow': (value) => ({\n            textShadow: value,\n          }),\n        },\n        { values: theme('textShadow') }\n      )\n    }),\n  ],\n}\n```\n\nAnd that's it.\n\nWe can now write `text-shadow shadow-red-500` and have a beautiful red text shadow appear, fully created with Tailwind CSS and zero custom CSS.\n\nAll I did was follow the [adding plugins documentation](https://tailwindcss.com/docs/plugins#adding-utilities) and it worked.\n\nOur code added the following Tailwind CSS classes:\n\n- `text-shadow`\n- `text-shadow-sm`\n- `text-shadow-lg`\n\nBut you can add as many as you like.\n\nThe classes that have been added will appear in [Tailwind CSS IntelliSense](https://tailwindcss.com/docs/editor-setup#intelli-sense-for-vs-code) when writing something like `text-sh` for example.\n\nIt's worth noting the use of `var(--tw-shadow-color)`. This is important as it allows us to use Tailwind CSS `shadow-[color]` classes with the `text-shadow` classes we've added.\n\nSomething else to note is we can use arbitrary values such as; `text-shadow-[0_4px_8px_#6366f1]` to create text shadows.\n\nWant to see more? You can view the [full example](https://play.tailwindcss.com/wJi9jhaOyb) on the Tailwind CSS play sandbox.\n",
            "url": "https://www.markmead.dev/blog/text-shadow-with-tailwindcss",
            "title": "How to Add Text Shadow Support to Tailwind CSS",
            "date_modified": "2022-03-26T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        },
        {
            "id": "whats-new-in-hyperui",
            "content_html": "\n## What is HyperUI?\n\nHyperUI is a collection of free Tailwind CSS components that are open source.\n\n## HyperUI v2\n\nThe new version of HyperUI loads faster, is friendlier for developers that want to contribute and now has a great base to build from in 2022.\n\n### File Management\n\n#### Goodbye JavaScript\n\nIt's worth understanding how HyperUI created pages such as `/components/footers` before the update. This was managed through JavaScript arrays and helper functions that I'd use with `getStaticProps`. Here is how that looked:\n\n```js\nexport async function getStaticProps({ params: { id } }: Params) {\n  const collection = currentCollection(id)\n  const components = currentCollectionComponents(id)\n\n  return {\n    props: {\n      collection,\n      components,\n    },\n  }\n}\n```\n\nYou can view how this code works in [/lib/collections.ts](https://github.com/markmead/hyperui/blob/464b9670faeb7aa0d4bba79e39a1cc3a6a70cdb8/lib/collections.ts).\n\nThis is taking in the `id` from the URL, for example `footers` and finding the `footers` object in the collections array, it then gets the collection data and components which are then used for rendering.\n\nThis works fine but if I wanted to add specific content to `/components/footers` I'd need to update multiple files. Therefore, this is not friendly for contributors and has a massive drawback in that you can't update collections individually.\n\nHere is a preview of how the collections and components array would look:\n\n**Collections**\n\n```js\nconst collections = [\n  {\n    name: 'Alerts',\n    id: 'alerts',\n    emoji: '🚨',\n    spacing: 'max-w-sm mx-auto p-8',\n    count: alertComponents.length,\n    components: alertComponents,\n  },\n  // ...\n]\n```\n\n[View the full file](https://github.com/markmead/hyperui/blob/464b9670faeb7aa0d4bba79e39a1cc3a6a70cdb8/lib/collections.ts).\n\n**Alerts Component**\n\n```js\nconst alerts = [\n  { id: 1, title: 'Simple' },\n  { id: 2, title: 'With Description' },\n  { id: 3, title: 'With List' },\n  { id: 4, title: 'With Close' },\n  { id: 5, title: 'With Accent' },\n  { id: 6, title: 'With Icon, Content and Close' },\n  { id: 7, title: 'Dark with Icon' },\n]\n```\n\n[View the full file](https://github.com/markmead/hyperui/blob/464b9670faeb7aa0d4bba79e39a1cc3a6a70cdb8/lib/components.ts).\n\n#### Hello Markdown\n\nI knew I wanted to use markdown and specifically MDX after using [next-mdx-remote](https://github.com/hashicorp/next-mdx-remote) on the [HyperJS website](https://www.hyperjs.dev/).\n\nThe rebuild needed to replicate what was currently working on HyperUI, therefore the checklist would be:\n\n- Manage Collection\n- Manage Components\n- Collection Spacing\n- Component Spacing\n\nAnd the new features I wanted are:\n\n- Manage SEO Content\n- Isolated Content\n\nIf you take a look at the [data/components folder](https://github.com/markmead/hyperui/tree/main/data/components) you will notice each collection has their own MDX file. This instantly ticks \"Isolated Content\" off the checklist.\n\nThe rest of the checklist can be handled with frontmatter. If you're not sure what frontmatter is, it's key/value pairs within a YAML block. As HyperUI used JavaScript objects for collections, all of the data was in key/value pairs already.\n\nHere's how the MDX file looked with the collection, components and SEO data:\n\n```shell\n---\ntitle: Announcements\nemoji: 📣\nspacing: flex flex-col gap-4\nseo:\n  title: Announcement Components\n  description: Announcement components created with Tailwind CSS\ncomponents:\n  1:\n    title: Simple\n  2:\n    title: With Icon\n  3:\n    title: Floating with Close\n    spacing: relative\n  4:\n    title: With Slider\n---\n\n# Announcement Components\n\n<List items={examples} name={name} spacing={spacing} />\n```\n\nThis has now ticked everything off the checklist as it's taken the old collection object writing JavaScript and converted it to frontmatter.\n\n### Collection Content\n\nThanks to the `.prose` class from Tailwind CSS, the process of adding content has been streamlined. The days of adding content to JavaScript files and conditionally rendering the content are in the past, now all I have to do is write markdown.\n\n### Speed, Speed and Speed\n\nIt's no secret to me that HyperUI needed a performance rework and in HyperUI v2 I'm pleased to say there has been some massive improvements.\n\nAll of these changes has seen results of HyperUI loading **5-8x faster** and now has **100/100** Lighthouse scores across the board.\n\n#### Component Loading\n\nFor reference, HyperUI loads components by using `fetch` to grab the HTML from `/components/[collection]/[id].html` and then render the response in an `<iframe>`.\n\nFor example, if you went to `/components/alerts` HyperUI would do the following:\n\n```js\nfetch('/components/alerts/1.html')\nfetch('/components/alerts/2.html')\n// ...\nfetch('/components/alerts/7.html')\n```\n\nAnd this would all happen on page load. Not great, right? Especially when you consider some collections have 10+ components.\n\nFixing this was something I've tried in the past but for some reason I could not get `intersectionObserver` to play nice. Enter [react-intersection-observer](https://github.com/thebuilder/react-intersection-observer).\n\nHow does it work now?\n\nYou land on `/components/alerts` and the first component loads `fetch('/components/alerts/1.html')`. Start scrolling and as components enter the viewport another `fetch` is fired off for that component.\n\nWhen I saw this working I was beyond thrilled! I ran a test and pages were loading 5-8x faster. It's a testament to [react-intersection-observer](https://github.com/thebuilder/react-intersection-observer) that it worked this well out of the box, I only changed one setting and that was to stop `fetch` being re-called when scrolling back up.\n\n#### Less Renders\n\nIf you're wondering how HyperUI passes the CSS to these components it's quite simple.\n\nWhen the component HTML is fetched it adds in:\n\n```html\n<head>\n  <link rel=\"stylesheet\" href=\"/build.css\" />\n</head>\n```\n\nCurrently, `/build.css` is a tiny file and doesn't have too much of an impact on the performance. However, one thing I noticed was `/build.css` being loaded in each time you toggled back to the preview of the component from the source code.\n\nThis was happening because the component was being re-rendered as it was wrapped in:\n\n```shell\n{view ? <Preview /> : <Code />}\n```\n\nI've changed this now to use CSS class names to toggle between the preview and the source code, this results in `/build.css` not being re-loaded.\n\n#### Bug Fixes\n\nDuring the rebuild I noticed that components were loaded multiple times.\n\nFor example, `/components/alerts` has 7 components but there were times that 14/21 requests were sent. This was an issue for speed and one that I'm surprised didn't show up earlier, although it might have been created in the rebuild process.\n\nThis was fixed by adding `[id]` to the `useEffect` hook that was fetching the component data. Small change, but has resulted in a big improvement.\n\n#### Limit Passed Data\n\nAs I was updating HyperUI I noticed there was a few cases of unnecessary data being passed via props. The biggest culprit was the collection cards.\n\nIn the past these would received the entire collection object as a prop, however, with the new update to HyperUI you specify what attributes you want back and only they will be returned, therefore limiting the data that is passed around.\n\nCurrently that filtering is an optional parameter on the helper function, in the future I'll be making it required.\n\n### UI Updates\n\nYou'll notice a few changes to the UI, these are quite minimal:\n\n- Loading Indicator for Components\n- Improved Collection Page\n- Improved Mobile Menu\n- New Component Card\n- Removed Search (will return with a better UI)\n- Removed Favourites (wasn't used)\n- Removed Breadcrumb\n\n### General Updates\n\nThere were a few updates that happened during the build that weren't related to the build:\n\n- Improve Typescript Checking\n  - More Interfaces\n  - More Type Checks\n- Improve SEO\n- Removed Unused Packages\n\nAnd that's all I can remember. There was so much to this update and it's given HyperUI a fantastic base to build on for 2022. I've already added a few components to HyperUI after the rebuild went live and I can confirm the process has improved greatly.\n\nI can't wait to see how far HyperUI can go in 2022.\n",
            "url": "https://www.markmead.dev/blog/whats-new-in-hyperui",
            "title": "What's New in HyperUI? Biggest Update Yet!",
            "date_modified": "2022-03-13T00:00:00.000Z",
            "author": {
                "name": "Mark Mead",
                "url": "https://www.markmead.dev/"
            }
        }
    ]
}